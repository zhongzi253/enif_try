%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:4.0.2
%% Purpose: encoder and decoder to the types in mod S1AP-PDU-Contents

-module('S1AP-PDU-Contents').
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-include("S1AP-PDU-Contents.hrl").
-asn1_info([{vsn,'4.0.2'},
            {module,'S1AP-PDU-Contents'},
            {options,[verbose,warnings,per,errors,
 {cwd,"/proj/git_workspace/pdupc/eceghik/eceghik__ndpgsn_5_0_wb__ndpgsn_5_0_wbsilver_lsv_ce_lte/sgsn_mme/sgsn-e/eps/s1ap/test"},
 {outdir,"/proj/git_workspace/pdupc/eceghik/eceghik__ndpgsn_5_0_wb__ndpgsn_5_0_wbsilver_lsv_ce_lte/sgsn_mme/sgsn-e/eps/s1ap/test"},
 debug_info,compact_bit_string,
 {i,"."},
 {i,"/proj/git_workspace/pdupc/eceghik/eceghik__ndpgsn_5_0_wb__ndpgsn_5_0_wbsilver_lsv_ce_lte/sgsn_mme/sgsn-e/eps/s1ap/test"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_HandoverRequired'/1,
'enc_HandoverCommand'/1,
'enc_E-RABSubjecttoDataForwardingList'/1,
'enc_E-RABDataForwardingItem'/1,
'enc_HandoverPreparationFailure'/1,
'enc_HandoverRequest'/1,
'enc_E-RABToBeSetupListHOReq'/1,
'enc_E-RABToBeSetupItemHOReq'/1,
'enc_HandoverRequestAcknowledge'/1,
'enc_E-RABAdmittedList'/1,
'enc_E-RABAdmittedItem'/1,
'enc_E-RABFailedtoSetupListHOReqAck'/1,
'enc_E-RABFailedToSetupItemHOReqAck'/1,
'enc_HandoverFailure'/1,
'enc_HandoverNotify'/1,
'enc_PathSwitchRequest'/1,
'enc_E-RABToBeSwitchedDLList'/1,
'enc_E-RABToBeSwitchedDLItem'/1,
'enc_PathSwitchRequestAcknowledge'/1,
'enc_E-RABToBeSwitchedULList'/1,
'enc_E-RABToBeSwitchedULItem'/1,
'enc_PathSwitchRequestFailure'/1,
'enc_HandoverCancel'/1,
'enc_HandoverCancelAcknowledge'/1,
'enc_E-RABSetupRequest'/1,
'enc_E-RABToBeSetupListBearerSUReq'/1,
'enc_E-RABToBeSetupItemBearerSUReq'/1,
'enc_E-RABSetupResponse'/1,
'enc_E-RABSetupListBearerSURes'/1,
'enc_E-RABSetupItemBearerSURes'/1,
'enc_E-RABModifyRequest'/1,
'enc_E-RABToBeModifiedListBearerModReq'/1,
'enc_E-RABToBeModifiedItemBearerModReq'/1,
'enc_E-RABModifyResponse'/1,
'enc_E-RABModifyListBearerModRes'/1,
'enc_E-RABModifyItemBearerModRes'/1,
'enc_E-RABReleaseCommand'/1,
'enc_E-RABReleaseResponse'/1,
'enc_E-RABReleaseListBearerRelComp'/1,
'enc_E-RABReleaseItemBearerRelComp'/1,
'enc_E-RABReleaseIndication'/1,
'enc_InitialContextSetupRequest'/1,
'enc_E-RABToBeSetupListCtxtSUReq'/1,
'enc_E-RABToBeSetupItemCtxtSUReq'/1,
'enc_InitialContextSetupResponse'/1,
'enc_E-RABSetupListCtxtSURes'/1,
'enc_E-RABSetupItemCtxtSURes'/1,
'enc_InitialContextSetupFailure'/1,
'enc_Paging'/1,
'enc_TAIList'/1,
'enc_TAIItem'/1,
'enc_UEContextReleaseRequest'/1,
'enc_UEContextReleaseCommand'/1,
'enc_UEContextReleaseComplete'/1,
'enc_UEContextModificationRequest'/1,
'enc_UEContextModificationResponse'/1,
'enc_UEContextModificationFailure'/1,
'enc_DownlinkNASTransport'/1,
'enc_InitialUEMessage'/1,
'enc_UplinkNASTransport'/1,
'enc_NASNonDeliveryIndication'/1,
'enc_Reset'/1,
'enc_ResetType'/1,
'enc_ResetAll'/1,
'enc_UE-associatedLogicalS1-ConnectionListRes'/1,
'enc_ResetAcknowledge'/1,
'enc_UE-associatedLogicalS1-ConnectionListResAck'/1,
'enc_ErrorIndication'/1,
'enc_S1SetupRequest'/1,
'enc_S1SetupResponse'/1,
'enc_S1SetupFailure'/1,
'enc_ENBConfigurationUpdate'/1,
'enc_ENBConfigurationUpdateAcknowledge'/1,
'enc_ENBConfigurationUpdateFailure'/1,
'enc_MMEConfigurationUpdate'/1,
'enc_MMEConfigurationUpdateAcknowledge'/1,
'enc_MMEConfigurationUpdateFailure'/1,
'enc_DownlinkS1cdma2000tunneling'/1,
'enc_UplinkS1cdma2000tunneling'/1,
'enc_UECapabilityInfoIndication'/1,
'enc_ENBStatusTransfer'/1,
'enc_MMEStatusTransfer'/1,
'enc_TraceStart'/1,
'enc_TraceFailureIndication'/1,
'enc_DeactivateTrace'/1,
'enc_CellTrafficTrace'/1,
'enc_LocationReportingControl'/1,
'enc_LocationReportingFailureIndication'/1,
'enc_LocationReport'/1,
'enc_OverloadStart'/1,
'enc_OverloadStop'/1,
'enc_WriteReplaceWarningRequest'/1,
'enc_WriteReplaceWarningResponse'/1,
'enc_ENBDirectInformationTransfer'/1,
'enc_Inter-SystemInformationTransferType'/1,
'enc_MMEDirectInformationTransfer'/1,
'enc_ENBConfigurationTransfer'/1,
'enc_MMEConfigurationTransfer'/1,
'enc_PrivateMessage'/1,
'enc_KillRequest'/1,
'enc_KillResponse'/1,
'enc_DownlinkUEAssociatedLPPaTransport'/1,
'enc_UplinkUEAssociatedLPPaTransport'/1,
'enc_DownlinkNonUEAssociatedLPPaTransport'/1,
'enc_UplinkNonUEAssociatedLPPaTransport'/1
]).

-export([
'dec_HandoverRequired'/1,
'dec_HandoverCommand'/1,
'dec_E-RABSubjecttoDataForwardingList'/1,
'dec_E-RABDataForwardingItem'/1,
'dec_HandoverPreparationFailure'/1,
'dec_HandoverRequest'/1,
'dec_E-RABToBeSetupListHOReq'/1,
'dec_E-RABToBeSetupItemHOReq'/1,
'dec_HandoverRequestAcknowledge'/1,
'dec_E-RABAdmittedList'/1,
'dec_E-RABAdmittedItem'/1,
'dec_E-RABFailedtoSetupListHOReqAck'/1,
'dec_E-RABFailedToSetupItemHOReqAck'/1,
'dec_HandoverFailure'/1,
'dec_HandoverNotify'/1,
'dec_PathSwitchRequest'/1,
'dec_E-RABToBeSwitchedDLList'/1,
'dec_E-RABToBeSwitchedDLItem'/1,
'dec_PathSwitchRequestAcknowledge'/1,
'dec_E-RABToBeSwitchedULList'/1,
'dec_E-RABToBeSwitchedULItem'/1,
'dec_PathSwitchRequestFailure'/1,
'dec_HandoverCancel'/1,
'dec_HandoverCancelAcknowledge'/1,
'dec_E-RABSetupRequest'/1,
'dec_E-RABToBeSetupListBearerSUReq'/1,
'dec_E-RABToBeSetupItemBearerSUReq'/1,
'dec_E-RABSetupResponse'/1,
'dec_E-RABSetupListBearerSURes'/1,
'dec_E-RABSetupItemBearerSURes'/1,
'dec_E-RABModifyRequest'/1,
'dec_E-RABToBeModifiedListBearerModReq'/1,
'dec_E-RABToBeModifiedItemBearerModReq'/1,
'dec_E-RABModifyResponse'/1,
'dec_E-RABModifyListBearerModRes'/1,
'dec_E-RABModifyItemBearerModRes'/1,
'dec_E-RABReleaseCommand'/1,
'dec_E-RABReleaseResponse'/1,
'dec_E-RABReleaseListBearerRelComp'/1,
'dec_E-RABReleaseItemBearerRelComp'/1,
'dec_E-RABReleaseIndication'/1,
'dec_InitialContextSetupRequest'/1,
'dec_E-RABToBeSetupListCtxtSUReq'/1,
'dec_E-RABToBeSetupItemCtxtSUReq'/1,
'dec_InitialContextSetupResponse'/1,
'dec_E-RABSetupListCtxtSURes'/1,
'dec_E-RABSetupItemCtxtSURes'/1,
'dec_InitialContextSetupFailure'/1,
'dec_Paging'/1,
'dec_TAIList'/1,
'dec_TAIItem'/1,
'dec_UEContextReleaseRequest'/1,
'dec_UEContextReleaseCommand'/1,
'dec_UEContextReleaseComplete'/1,
'dec_UEContextModificationRequest'/1,
'dec_UEContextModificationResponse'/1,
'dec_UEContextModificationFailure'/1,
'dec_DownlinkNASTransport'/1,
'dec_InitialUEMessage'/1,
'dec_UplinkNASTransport'/1,
'dec_NASNonDeliveryIndication'/1,
'dec_Reset'/1,
'dec_ResetType'/1,
'dec_ResetAll'/1,
'dec_UE-associatedLogicalS1-ConnectionListRes'/1,
'dec_ResetAcknowledge'/1,
'dec_UE-associatedLogicalS1-ConnectionListResAck'/1,
'dec_ErrorIndication'/1,
'dec_S1SetupRequest'/1,
'dec_S1SetupResponse'/1,
'dec_S1SetupFailure'/1,
'dec_ENBConfigurationUpdate'/1,
'dec_ENBConfigurationUpdateAcknowledge'/1,
'dec_ENBConfigurationUpdateFailure'/1,
'dec_MMEConfigurationUpdate'/1,
'dec_MMEConfigurationUpdateAcknowledge'/1,
'dec_MMEConfigurationUpdateFailure'/1,
'dec_DownlinkS1cdma2000tunneling'/1,
'dec_UplinkS1cdma2000tunneling'/1,
'dec_UECapabilityInfoIndication'/1,
'dec_ENBStatusTransfer'/1,
'dec_MMEStatusTransfer'/1,
'dec_TraceStart'/1,
'dec_TraceFailureIndication'/1,
'dec_DeactivateTrace'/1,
'dec_CellTrafficTrace'/1,
'dec_LocationReportingControl'/1,
'dec_LocationReportingFailureIndication'/1,
'dec_LocationReport'/1,
'dec_OverloadStart'/1,
'dec_OverloadStop'/1,
'dec_WriteReplaceWarningRequest'/1,
'dec_WriteReplaceWarningResponse'/1,
'dec_ENBDirectInformationTransfer'/1,
'dec_Inter-SystemInformationTransferType'/1,
'dec_MMEDirectInformationTransfer'/1,
'dec_ENBConfigurationTransfer'/1,
'dec_MMEConfigurationTransfer'/1,
'dec_PrivateMessage'/1,
'dec_KillRequest'/1,
'dec_KillResponse'/1,
'dec_DownlinkUEAssociatedLPPaTransport'/1,
'dec_UplinkUEAssociatedLPPaTransport'/1,
'dec_DownlinkNonUEAssociatedLPPaTransport'/1,
'dec_UplinkNonUEAssociatedLPPaTransport'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> compact.

legacy_erlang_types() -> true.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('HandoverRequired',Data) -> 'enc_HandoverRequired'(Data);
encode_disp('HandoverCommand',Data) -> 'enc_HandoverCommand'(Data);
encode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'enc_E-RABSubjecttoDataForwardingList'(Data);
encode_disp('E-RABDataForwardingItem',Data) -> 'enc_E-RABDataForwardingItem'(Data);
encode_disp('HandoverPreparationFailure',Data) -> 'enc_HandoverPreparationFailure'(Data);
encode_disp('HandoverRequest',Data) -> 'enc_HandoverRequest'(Data);
encode_disp('E-RABToBeSetupListHOReq',Data) -> 'enc_E-RABToBeSetupListHOReq'(Data);
encode_disp('E-RABToBeSetupItemHOReq',Data) -> 'enc_E-RABToBeSetupItemHOReq'(Data);
encode_disp('HandoverRequestAcknowledge',Data) -> 'enc_HandoverRequestAcknowledge'(Data);
encode_disp('E-RABAdmittedList',Data) -> 'enc_E-RABAdmittedList'(Data);
encode_disp('E-RABAdmittedItem',Data) -> 'enc_E-RABAdmittedItem'(Data);
encode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'enc_E-RABFailedtoSetupListHOReqAck'(Data);
encode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'enc_E-RABFailedToSetupItemHOReqAck'(Data);
encode_disp('HandoverFailure',Data) -> 'enc_HandoverFailure'(Data);
encode_disp('HandoverNotify',Data) -> 'enc_HandoverNotify'(Data);
encode_disp('PathSwitchRequest',Data) -> 'enc_PathSwitchRequest'(Data);
encode_disp('E-RABToBeSwitchedDLList',Data) -> 'enc_E-RABToBeSwitchedDLList'(Data);
encode_disp('E-RABToBeSwitchedDLItem',Data) -> 'enc_E-RABToBeSwitchedDLItem'(Data);
encode_disp('PathSwitchRequestAcknowledge',Data) -> 'enc_PathSwitchRequestAcknowledge'(Data);
encode_disp('E-RABToBeSwitchedULList',Data) -> 'enc_E-RABToBeSwitchedULList'(Data);
encode_disp('E-RABToBeSwitchedULItem',Data) -> 'enc_E-RABToBeSwitchedULItem'(Data);
encode_disp('PathSwitchRequestFailure',Data) -> 'enc_PathSwitchRequestFailure'(Data);
encode_disp('HandoverCancel',Data) -> 'enc_HandoverCancel'(Data);
encode_disp('HandoverCancelAcknowledge',Data) -> 'enc_HandoverCancelAcknowledge'(Data);
encode_disp('E-RABSetupRequest',Data) -> 'enc_E-RABSetupRequest'(Data);
encode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'enc_E-RABToBeSetupListBearerSUReq'(Data);
encode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'enc_E-RABToBeSetupItemBearerSUReq'(Data);
encode_disp('E-RABSetupResponse',Data) -> 'enc_E-RABSetupResponse'(Data);
encode_disp('E-RABSetupListBearerSURes',Data) -> 'enc_E-RABSetupListBearerSURes'(Data);
encode_disp('E-RABSetupItemBearerSURes',Data) -> 'enc_E-RABSetupItemBearerSURes'(Data);
encode_disp('E-RABModifyRequest',Data) -> 'enc_E-RABModifyRequest'(Data);
encode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'enc_E-RABToBeModifiedListBearerModReq'(Data);
encode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'enc_E-RABToBeModifiedItemBearerModReq'(Data);
encode_disp('E-RABModifyResponse',Data) -> 'enc_E-RABModifyResponse'(Data);
encode_disp('E-RABModifyListBearerModRes',Data) -> 'enc_E-RABModifyListBearerModRes'(Data);
encode_disp('E-RABModifyItemBearerModRes',Data) -> 'enc_E-RABModifyItemBearerModRes'(Data);
encode_disp('E-RABReleaseCommand',Data) -> 'enc_E-RABReleaseCommand'(Data);
encode_disp('E-RABReleaseResponse',Data) -> 'enc_E-RABReleaseResponse'(Data);
encode_disp('E-RABReleaseListBearerRelComp',Data) -> 'enc_E-RABReleaseListBearerRelComp'(Data);
encode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'enc_E-RABReleaseItemBearerRelComp'(Data);
encode_disp('E-RABReleaseIndication',Data) -> 'enc_E-RABReleaseIndication'(Data);
encode_disp('InitialContextSetupRequest',Data) -> 'enc_InitialContextSetupRequest'(Data);
encode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'enc_E-RABToBeSetupListCtxtSUReq'(Data);
encode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'enc_E-RABToBeSetupItemCtxtSUReq'(Data);
encode_disp('InitialContextSetupResponse',Data) -> 'enc_InitialContextSetupResponse'(Data);
encode_disp('E-RABSetupListCtxtSURes',Data) -> 'enc_E-RABSetupListCtxtSURes'(Data);
encode_disp('E-RABSetupItemCtxtSURes',Data) -> 'enc_E-RABSetupItemCtxtSURes'(Data);
encode_disp('InitialContextSetupFailure',Data) -> 'enc_InitialContextSetupFailure'(Data);
encode_disp('Paging',Data) -> 'enc_Paging'(Data);
encode_disp('TAIList',Data) -> 'enc_TAIList'(Data);
encode_disp('TAIItem',Data) -> 'enc_TAIItem'(Data);
encode_disp('UEContextReleaseRequest',Data) -> 'enc_UEContextReleaseRequest'(Data);
encode_disp('UEContextReleaseCommand',Data) -> 'enc_UEContextReleaseCommand'(Data);
encode_disp('UEContextReleaseComplete',Data) -> 'enc_UEContextReleaseComplete'(Data);
encode_disp('UEContextModificationRequest',Data) -> 'enc_UEContextModificationRequest'(Data);
encode_disp('UEContextModificationResponse',Data) -> 'enc_UEContextModificationResponse'(Data);
encode_disp('UEContextModificationFailure',Data) -> 'enc_UEContextModificationFailure'(Data);
encode_disp('DownlinkNASTransport',Data) -> 'enc_DownlinkNASTransport'(Data);
encode_disp('InitialUEMessage',Data) -> 'enc_InitialUEMessage'(Data);
encode_disp('UplinkNASTransport',Data) -> 'enc_UplinkNASTransport'(Data);
encode_disp('NASNonDeliveryIndication',Data) -> 'enc_NASNonDeliveryIndication'(Data);
encode_disp('Reset',Data) -> 'enc_Reset'(Data);
encode_disp('ResetType',Data) -> 'enc_ResetType'(Data);
encode_disp('ResetAll',Data) -> 'enc_ResetAll'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListRes'(Data);
encode_disp('ResetAcknowledge',Data) -> 'enc_ResetAcknowledge'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListResAck'(Data);
encode_disp('ErrorIndication',Data) -> 'enc_ErrorIndication'(Data);
encode_disp('S1SetupRequest',Data) -> 'enc_S1SetupRequest'(Data);
encode_disp('S1SetupResponse',Data) -> 'enc_S1SetupResponse'(Data);
encode_disp('S1SetupFailure',Data) -> 'enc_S1SetupFailure'(Data);
encode_disp('ENBConfigurationUpdate',Data) -> 'enc_ENBConfigurationUpdate'(Data);
encode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'enc_ENBConfigurationUpdateAcknowledge'(Data);
encode_disp('ENBConfigurationUpdateFailure',Data) -> 'enc_ENBConfigurationUpdateFailure'(Data);
encode_disp('MMEConfigurationUpdate',Data) -> 'enc_MMEConfigurationUpdate'(Data);
encode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'enc_MMEConfigurationUpdateAcknowledge'(Data);
encode_disp('MMEConfigurationUpdateFailure',Data) -> 'enc_MMEConfigurationUpdateFailure'(Data);
encode_disp('DownlinkS1cdma2000tunneling',Data) -> 'enc_DownlinkS1cdma2000tunneling'(Data);
encode_disp('UplinkS1cdma2000tunneling',Data) -> 'enc_UplinkS1cdma2000tunneling'(Data);
encode_disp('UECapabilityInfoIndication',Data) -> 'enc_UECapabilityInfoIndication'(Data);
encode_disp('ENBStatusTransfer',Data) -> 'enc_ENBStatusTransfer'(Data);
encode_disp('MMEStatusTransfer',Data) -> 'enc_MMEStatusTransfer'(Data);
encode_disp('TraceStart',Data) -> 'enc_TraceStart'(Data);
encode_disp('TraceFailureIndication',Data) -> 'enc_TraceFailureIndication'(Data);
encode_disp('DeactivateTrace',Data) -> 'enc_DeactivateTrace'(Data);
encode_disp('CellTrafficTrace',Data) -> 'enc_CellTrafficTrace'(Data);
encode_disp('LocationReportingControl',Data) -> 'enc_LocationReportingControl'(Data);
encode_disp('LocationReportingFailureIndication',Data) -> 'enc_LocationReportingFailureIndication'(Data);
encode_disp('LocationReport',Data) -> 'enc_LocationReport'(Data);
encode_disp('OverloadStart',Data) -> 'enc_OverloadStart'(Data);
encode_disp('OverloadStop',Data) -> 'enc_OverloadStop'(Data);
encode_disp('WriteReplaceWarningRequest',Data) -> 'enc_WriteReplaceWarningRequest'(Data);
encode_disp('WriteReplaceWarningResponse',Data) -> 'enc_WriteReplaceWarningResponse'(Data);
encode_disp('ENBDirectInformationTransfer',Data) -> 'enc_ENBDirectInformationTransfer'(Data);
encode_disp('Inter-SystemInformationTransferType',Data) -> 'enc_Inter-SystemInformationTransferType'(Data);
encode_disp('MMEDirectInformationTransfer',Data) -> 'enc_MMEDirectInformationTransfer'(Data);
encode_disp('ENBConfigurationTransfer',Data) -> 'enc_ENBConfigurationTransfer'(Data);
encode_disp('MMEConfigurationTransfer',Data) -> 'enc_MMEConfigurationTransfer'(Data);
encode_disp('PrivateMessage',Data) -> 'enc_PrivateMessage'(Data);
encode_disp('KillRequest',Data) -> 'enc_KillRequest'(Data);
encode_disp('KillResponse',Data) -> 'enc_KillResponse'(Data);
encode_disp('DownlinkUEAssociatedLPPaTransport',Data) -> 'enc_DownlinkUEAssociatedLPPaTransport'(Data);
encode_disp('UplinkUEAssociatedLPPaTransport',Data) -> 'enc_UplinkUEAssociatedLPPaTransport'(Data);
encode_disp('DownlinkNonUEAssociatedLPPaTransport',Data) -> 'enc_DownlinkNonUEAssociatedLPPaTransport'(Data);
encode_disp('UplinkNonUEAssociatedLPPaTransport',Data) -> 'enc_UplinkNonUEAssociatedLPPaTransport'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('HandoverRequired',Data) -> 'dec_HandoverRequired'(Data);
decode_disp('HandoverCommand',Data) -> 'dec_HandoverCommand'(Data);
decode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'dec_E-RABSubjecttoDataForwardingList'(Data);
decode_disp('E-RABDataForwardingItem',Data) -> 'dec_E-RABDataForwardingItem'(Data);
decode_disp('HandoverPreparationFailure',Data) -> 'dec_HandoverPreparationFailure'(Data);
decode_disp('HandoverRequest',Data) -> 'dec_HandoverRequest'(Data);
decode_disp('E-RABToBeSetupListHOReq',Data) -> 'dec_E-RABToBeSetupListHOReq'(Data);
decode_disp('E-RABToBeSetupItemHOReq',Data) -> 'dec_E-RABToBeSetupItemHOReq'(Data);
decode_disp('HandoverRequestAcknowledge',Data) -> 'dec_HandoverRequestAcknowledge'(Data);
decode_disp('E-RABAdmittedList',Data) -> 'dec_E-RABAdmittedList'(Data);
decode_disp('E-RABAdmittedItem',Data) -> 'dec_E-RABAdmittedItem'(Data);
decode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'dec_E-RABFailedtoSetupListHOReqAck'(Data);
decode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'dec_E-RABFailedToSetupItemHOReqAck'(Data);
decode_disp('HandoverFailure',Data) -> 'dec_HandoverFailure'(Data);
decode_disp('HandoverNotify',Data) -> 'dec_HandoverNotify'(Data);
decode_disp('PathSwitchRequest',Data) -> 'dec_PathSwitchRequest'(Data);
decode_disp('E-RABToBeSwitchedDLList',Data) -> 'dec_E-RABToBeSwitchedDLList'(Data);
decode_disp('E-RABToBeSwitchedDLItem',Data) -> 'dec_E-RABToBeSwitchedDLItem'(Data);
decode_disp('PathSwitchRequestAcknowledge',Data) -> 'dec_PathSwitchRequestAcknowledge'(Data);
decode_disp('E-RABToBeSwitchedULList',Data) -> 'dec_E-RABToBeSwitchedULList'(Data);
decode_disp('E-RABToBeSwitchedULItem',Data) -> 'dec_E-RABToBeSwitchedULItem'(Data);
decode_disp('PathSwitchRequestFailure',Data) -> 'dec_PathSwitchRequestFailure'(Data);
decode_disp('HandoverCancel',Data) -> 'dec_HandoverCancel'(Data);
decode_disp('HandoverCancelAcknowledge',Data) -> 'dec_HandoverCancelAcknowledge'(Data);
decode_disp('E-RABSetupRequest',Data) -> 'dec_E-RABSetupRequest'(Data);
decode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'dec_E-RABToBeSetupListBearerSUReq'(Data);
decode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'dec_E-RABToBeSetupItemBearerSUReq'(Data);
decode_disp('E-RABSetupResponse',Data) -> 'dec_E-RABSetupResponse'(Data);
decode_disp('E-RABSetupListBearerSURes',Data) -> 'dec_E-RABSetupListBearerSURes'(Data);
decode_disp('E-RABSetupItemBearerSURes',Data) -> 'dec_E-RABSetupItemBearerSURes'(Data);
decode_disp('E-RABModifyRequest',Data) -> 'dec_E-RABModifyRequest'(Data);
decode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'dec_E-RABToBeModifiedListBearerModReq'(Data);
decode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'dec_E-RABToBeModifiedItemBearerModReq'(Data);
decode_disp('E-RABModifyResponse',Data) -> 'dec_E-RABModifyResponse'(Data);
decode_disp('E-RABModifyListBearerModRes',Data) -> 'dec_E-RABModifyListBearerModRes'(Data);
decode_disp('E-RABModifyItemBearerModRes',Data) -> 'dec_E-RABModifyItemBearerModRes'(Data);
decode_disp('E-RABReleaseCommand',Data) -> 'dec_E-RABReleaseCommand'(Data);
decode_disp('E-RABReleaseResponse',Data) -> 'dec_E-RABReleaseResponse'(Data);
decode_disp('E-RABReleaseListBearerRelComp',Data) -> 'dec_E-RABReleaseListBearerRelComp'(Data);
decode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'dec_E-RABReleaseItemBearerRelComp'(Data);
decode_disp('E-RABReleaseIndication',Data) -> 'dec_E-RABReleaseIndication'(Data);
decode_disp('InitialContextSetupRequest',Data) -> 'dec_InitialContextSetupRequest'(Data);
decode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'dec_E-RABToBeSetupListCtxtSUReq'(Data);
decode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'dec_E-RABToBeSetupItemCtxtSUReq'(Data);
decode_disp('InitialContextSetupResponse',Data) -> 'dec_InitialContextSetupResponse'(Data);
decode_disp('E-RABSetupListCtxtSURes',Data) -> 'dec_E-RABSetupListCtxtSURes'(Data);
decode_disp('E-RABSetupItemCtxtSURes',Data) -> 'dec_E-RABSetupItemCtxtSURes'(Data);
decode_disp('InitialContextSetupFailure',Data) -> 'dec_InitialContextSetupFailure'(Data);
decode_disp('Paging',Data) -> 'dec_Paging'(Data);
decode_disp('TAIList',Data) -> 'dec_TAIList'(Data);
decode_disp('TAIItem',Data) -> 'dec_TAIItem'(Data);
decode_disp('UEContextReleaseRequest',Data) -> 'dec_UEContextReleaseRequest'(Data);
decode_disp('UEContextReleaseCommand',Data) -> 'dec_UEContextReleaseCommand'(Data);
decode_disp('UEContextReleaseComplete',Data) -> 'dec_UEContextReleaseComplete'(Data);
decode_disp('UEContextModificationRequest',Data) -> 'dec_UEContextModificationRequest'(Data);
decode_disp('UEContextModificationResponse',Data) -> 'dec_UEContextModificationResponse'(Data);
decode_disp('UEContextModificationFailure',Data) -> 'dec_UEContextModificationFailure'(Data);
decode_disp('DownlinkNASTransport',Data) -> 'dec_DownlinkNASTransport'(Data);
decode_disp('InitialUEMessage',Data) -> 'dec_InitialUEMessage'(Data);
decode_disp('UplinkNASTransport',Data) -> 'dec_UplinkNASTransport'(Data);
decode_disp('NASNonDeliveryIndication',Data) -> 'dec_NASNonDeliveryIndication'(Data);
decode_disp('Reset',Data) -> 'dec_Reset'(Data);
decode_disp('ResetType',Data) -> 'dec_ResetType'(Data);
decode_disp('ResetAll',Data) -> 'dec_ResetAll'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListRes'(Data);
decode_disp('ResetAcknowledge',Data) -> 'dec_ResetAcknowledge'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListResAck'(Data);
decode_disp('ErrorIndication',Data) -> 'dec_ErrorIndication'(Data);
decode_disp('S1SetupRequest',Data) -> 'dec_S1SetupRequest'(Data);
decode_disp('S1SetupResponse',Data) -> 'dec_S1SetupResponse'(Data);
decode_disp('S1SetupFailure',Data) -> 'dec_S1SetupFailure'(Data);
decode_disp('ENBConfigurationUpdate',Data) -> 'dec_ENBConfigurationUpdate'(Data);
decode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'dec_ENBConfigurationUpdateAcknowledge'(Data);
decode_disp('ENBConfigurationUpdateFailure',Data) -> 'dec_ENBConfigurationUpdateFailure'(Data);
decode_disp('MMEConfigurationUpdate',Data) -> 'dec_MMEConfigurationUpdate'(Data);
decode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'dec_MMEConfigurationUpdateAcknowledge'(Data);
decode_disp('MMEConfigurationUpdateFailure',Data) -> 'dec_MMEConfigurationUpdateFailure'(Data);
decode_disp('DownlinkS1cdma2000tunneling',Data) -> 'dec_DownlinkS1cdma2000tunneling'(Data);
decode_disp('UplinkS1cdma2000tunneling',Data) -> 'dec_UplinkS1cdma2000tunneling'(Data);
decode_disp('UECapabilityInfoIndication',Data) -> 'dec_UECapabilityInfoIndication'(Data);
decode_disp('ENBStatusTransfer',Data) -> 'dec_ENBStatusTransfer'(Data);
decode_disp('MMEStatusTransfer',Data) -> 'dec_MMEStatusTransfer'(Data);
decode_disp('TraceStart',Data) -> 'dec_TraceStart'(Data);
decode_disp('TraceFailureIndication',Data) -> 'dec_TraceFailureIndication'(Data);
decode_disp('DeactivateTrace',Data) -> 'dec_DeactivateTrace'(Data);
decode_disp('CellTrafficTrace',Data) -> 'dec_CellTrafficTrace'(Data);
decode_disp('LocationReportingControl',Data) -> 'dec_LocationReportingControl'(Data);
decode_disp('LocationReportingFailureIndication',Data) -> 'dec_LocationReportingFailureIndication'(Data);
decode_disp('LocationReport',Data) -> 'dec_LocationReport'(Data);
decode_disp('OverloadStart',Data) -> 'dec_OverloadStart'(Data);
decode_disp('OverloadStop',Data) -> 'dec_OverloadStop'(Data);
decode_disp('WriteReplaceWarningRequest',Data) -> 'dec_WriteReplaceWarningRequest'(Data);
decode_disp('WriteReplaceWarningResponse',Data) -> 'dec_WriteReplaceWarningResponse'(Data);
decode_disp('ENBDirectInformationTransfer',Data) -> 'dec_ENBDirectInformationTransfer'(Data);
decode_disp('Inter-SystemInformationTransferType',Data) -> 'dec_Inter-SystemInformationTransferType'(Data);
decode_disp('MMEDirectInformationTransfer',Data) -> 'dec_MMEDirectInformationTransfer'(Data);
decode_disp('ENBConfigurationTransfer',Data) -> 'dec_ENBConfigurationTransfer'(Data);
decode_disp('MMEConfigurationTransfer',Data) -> 'dec_MMEConfigurationTransfer'(Data);
decode_disp('PrivateMessage',Data) -> 'dec_PrivateMessage'(Data);
decode_disp('KillRequest',Data) -> 'dec_KillRequest'(Data);
decode_disp('KillResponse',Data) -> 'dec_KillResponse'(Data);
decode_disp('DownlinkUEAssociatedLPPaTransport',Data) -> 'dec_DownlinkUEAssociatedLPPaTransport'(Data);
decode_disp('UplinkUEAssociatedLPPaTransport',Data) -> 'dec_UplinkUEAssociatedLPPaTransport'(Data);
decode_disp('DownlinkNonUEAssociatedLPPaTransport',Data) -> 'dec_DownlinkNonUEAssociatedLPPaTransport'(Data);
decode_disp('UplinkNonUEAssociatedLPPaTransport',Data) -> 'dec_UplinkNonUEAssociatedLPPaTransport'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_HandoverRequired'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequired_protocolIEs(Enc2@element)
end].
'enc_HandoverRequired_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value1(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverRequired(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequired_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequired',Term1},Bytes4}.


dec_HandoverRequired_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components2(V1@V0, V1@Buf1, []).


'dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value3(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_HandoverCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCommand_protocolIEs(Enc2@element)
end].
'enc_HandoverCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value4(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCommand',Term1},Bytes4}.


dec_HandoverCommand_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components5(V1@V0, V1@Buf1, []).


'dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value6(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSubjecttoDataForwardingList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSubjecttoDataForwardingList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components8(V1@Add4, V1@Buf1, []).


'dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value9(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABDataForwardingItem'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element bsr 4 =:= 0 ->
<<0:1,Enc7@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc7@element)]
end
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@bs = to_bitstring(Enc9@element, 1),
Enc10@bits = bit_size(Enc10@bs),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1,Enc10@bits@sub:8>>,
align|Enc10@bs];
Enc10@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc10@bits:14>>|Enc10@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc10@bs, 1)]
end
end
end
end,
begin
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@bin = iolist_to_binary(Enc12@element),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len =:= 4 ->
[align|Enc13@bin]
end
end
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@bs = to_bitstring(Enc15@element, 1),
Enc16@bits = bit_size(Enc16@bs),
Enc16@bits@sub = Enc16@bits - 1,
if 0 =< Enc16@bits@sub, Enc16@bits@sub < 160 ->
[<<0:1,Enc16@bits@sub:8>>,
align|Enc16@bs];
Enc16@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc16@bits:14>>|Enc16@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc16@bs, 1)]
end
end
end
end,
begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@bin = iolist_to_binary(Enc18@element),
Enc19@len = byte_size(Enc19@bin),
if Enc19@len =:= 4 ->
[align|Enc19@bin]
end
end
end
end|begin
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABDataForwardingItem_iE-Extensions'(Enc21@element)
end
end].
'enc_E-RABDataForwardingItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABDataForwardingItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V13,V6@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:4/binary-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Conv4 = binary_to_list(V7@V0),
{V7@Conv4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABDataForwardingItem_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABDataForwardingItem',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.


'dec_E-RABDataForwardingItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components11(V1@Add4, V1@Buf1, []).


'dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_HandoverPreparationFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverPreparationFailure_protocolIEs(Enc2@element)
end].
'enc_HandoverPreparationFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value13(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverPreparationFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverPreparationFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverPreparationFailure',Term1},Bytes4}.


dec_HandoverPreparationFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components14(V1@V0, V1@Buf1, []).


'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value15(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_HandoverRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequest_protocolIEs(Enc2@element)
end].
'enc_HandoverRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value16(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequest',Term1},Bytes4}.


dec_HandoverRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components17(V1@V0, V1@Buf1, []).


'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value18(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupListHOReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value19(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupListHOReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components20(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value21(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupItemHOReq'(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bs = to_bitstring(Enc5@element, 1),
Enc6@bits = bit_size(Enc6@bs),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 4 ->
Enc8@bin
end
end,
begin
Enc9@element = element(5, Val),
'S1AP-IEs':'enc_E-RABLevelQoSParameters'(Enc9@element)
end|begin
Enc10@element = element(6, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Enc10@element)
end
end].
'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension22(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupItemHOReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type E-RABLevelQoSParameters
{Term4,Bytes6} = 'S1AP-IEs':'dec_E-RABLevelQoSParameters'(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'E-RABToBeSetupItemHOReq',Term1,Term2,Term3,Term4,Term5},Bytes9}.


'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components23(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension24(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_HandoverRequestAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequestAcknowledge_protocolIEs(Enc2@element)
end].
'enc_HandoverRequestAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value25(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverRequestAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequestAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequestAcknowledge',Term1},Bytes4}.


dec_HandoverRequestAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components26(V1@V0, V1@Buf1, []).


'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value27(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABAdmittedList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABAdmittedList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABAdmittedList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value28(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABAdmittedList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components29(V1@Add4, V1@Buf1, []).


'dec_E-RABAdmittedList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value30(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABAdmittedItem'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element bsr 4 =:= 0 ->
<<0:1,Enc7@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc7@element)]
end
end,
begin
Enc9@element = element(3, Val),
Enc10@bs = to_bitstring(Enc9@element, 1),
Enc10@bits = bit_size(Enc10@bs),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1,Enc10@bits@sub:8>>,
align|Enc10@bs];
Enc10@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc10@bits:14>>|Enc10@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc10@bs, 1)]
end
end,
align,
begin
Enc11@element = element(4, Val),
Enc12@bin = iolist_to_binary(Enc11@element),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len =:= 4 ->
Enc12@bin
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bs = to_bitstring(Enc13@element, 1),
Enc14@bits = bit_size(Enc14@bs),
Enc14@bits@sub = Enc14@bits - 1,
if 0 =< Enc14@bits@sub, Enc14@bits@sub < 160 ->
[<<0:1,Enc14@bits@sub:8,0:7>>|Enc14@bs];
Enc14@bits < 16384 ->
[<<1:1,2:9,Enc14@bits:14>>|Enc14@bs];
true ->
[<<1:1,0:7>>|encode_fragmented(Enc14@bs, 1)]
end
end
end
end,
begin
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@bin = iolist_to_binary(Enc16@element),
Enc17@len = byte_size(Enc17@bin),
if Enc17@len =:= 4 ->
[align|Enc17@bin]
end
end
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@bs = to_bitstring(Enc19@element, 1),
Enc20@bits = bit_size(Enc20@bs),
Enc20@bits@sub = Enc20@bits - 1,
if 0 =< Enc20@bits@sub, Enc20@bits@sub < 160 ->
[<<0:1,Enc20@bits@sub:8>>,
align|Enc20@bs];
Enc20@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc20@bits:14>>|Enc20@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc20@bs, 1)]
end
end
end
end,
begin
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@bin = iolist_to_binary(Enc22@element),
Enc23@len = byte_size(Enc23@bin),
if Enc23@len =:= 4 ->
[align|Enc23@bin]
end
end
end
end|begin
Enc25@element = element(9, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABAdmittedItem_iE-Extensions'(Enc25@element)
end
end].
'enc_E-RABAdmittedItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABAdmittedItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 4) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V13,V6@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:4/binary-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Conv4 = binary_to_list(V7@V0),
{V7@Conv4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BIT STRING
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:8/unsigned-unit:1,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
V8@Pad8 = bit_size(V8@Buf4) band 7,
<<_:V8@Pad8,V8@V6:V8@Add5/binary-unit:1,V8@Buf7/bitstring>> = V8@Buf4,
{V8@V6,V8@Buf7};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@V10:V8@V8/binary-unit:1,V8@Buf11/bitstring>> ->
{V8@V10,V8@Buf11};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@V11:V8@V9/binary-unit:1,V8@Buf12/bitstring>> ->
{V8@V11,V8@Buf12};
<<_:V8@Pad6,1:1,1:1,V8@V9:6,V8@Buf10/bitstring>> ->
{V8@V11,V8@Buf12}  = decode_fragmented(V8@V9, V8@Buf10, 1),
{V8@V11,V8@Buf12}
end,
{V8@V3,V8@Buf4}
end,
{V8@V13,V8@Buf14}  = {decode_compact_bit_string(V8@V0),V8@Buf1},
{V8@V13,V8@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type OCTET STRING
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
begin
V9@Pad2 = bit_size(Bytes8) band 7,
<<_:V9@Pad2,V9@V0:4/binary-unit:8,V9@Buf1/bitstring>> = Bytes8,
V9@Conv4 = binary_to_list(V9@V0),
{V9@Conv4,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_E-RABAdmittedItem_iE-Extensions'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V10@V0,V10@Buf1} = case Bytes10 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'E-RABAdmittedItem',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.


'dec_E-RABAdmittedItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components31(V1@Add4, V1@Buf1, []).


'dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABFailedtoSetupListHOReqAck'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value32(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABFailedtoSetupListHOReqAck'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components33(V1@Add4, V1@Buf1, []).


'dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value34(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABFailedToSetupItemHOReqAck'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
'S1AP-IEs':enc_Cause(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Enc6@element)
end
end].
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABFailedToSetupItemHOReqAck'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type Cause
{Term2,Bytes4} = 'S1AP-IEs':dec_Cause(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'E-RABFailedToSetupItemHOReqAck',Term1,Term2,Term3},Bytes7}.


'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components35(V1@Add4, V1@Buf1, []).


'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_HandoverFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverFailure_protocolIEs(Enc2@element)
end].
'enc_HandoverFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value36(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverFailure',Term1},Bytes4}.


dec_HandoverFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components37(V1@V0, V1@Buf1, []).


'dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value38(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_HandoverNotify'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverNotify_protocolIEs(Enc2@element)
end].
'enc_HandoverNotify_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value39(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverNotify(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverNotify_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverNotify',Term1},Bytes4}.


dec_HandoverNotify_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components40(V1@V0, V1@Buf1, []).


'dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value41(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_PathSwitchRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequest_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value42(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_PathSwitchRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequest',Term1},Bytes4}.


dec_PathSwitchRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components43(V1@V0, V1@Buf1, []).


'dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value44(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSwitchedDLList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value45(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSwitchedDLList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components46(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value47(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSwitchedDLItem'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bs = to_bitstring(Enc5@element, 1),
Enc6@bits = bit_size(Enc6@bs),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 4 ->
Enc8@bin
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSwitchedDLItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeSwitchedDLItem',Term1,Term2,Term3,Term4},Bytes8}.


'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components48(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_PathSwitchRequestAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequestAcknowledge_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequestAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value49(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_PathSwitchRequestAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequestAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequestAcknowledge',Term1},Bytes4}.


dec_PathSwitchRequestAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components50(V1@V0, V1@Buf1, []).


'dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value51(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSwitchedULList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value52(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSwitchedULList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components53(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value54(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSwitchedULItem'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bs = to_bitstring(Enc5@element, 1),
Enc6@bits = bit_size(Enc6@bs),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 4 ->
Enc8@bin
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSwitchedULItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeSwitchedULItem_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeSwitchedULItem',Term1,Term2,Term3,Term4},Bytes8}.


'dec_E-RABToBeSwitchedULItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components55(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_PathSwitchRequestFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequestFailure_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequestFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value56(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_PathSwitchRequestFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequestFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequestFailure',Term1},Bytes4}.


dec_PathSwitchRequestFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components57(V1@V0, V1@Buf1, []).


'dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value58(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_HandoverCancel'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCancel_protocolIEs(Enc2@element)
end].
'enc_HandoverCancel_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value59(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverCancel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCancel_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCancel',Term1},Bytes4}.


dec_HandoverCancel_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components60(V1@V0, V1@Buf1, []).


'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value61(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_HandoverCancelAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCancelAcknowledge_protocolIEs(Enc2@element)
end].
'enc_HandoverCancelAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value62(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_HandoverCancelAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCancelAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCancelAcknowledge',Term1},Bytes4}.


dec_HandoverCancelAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components63(V1@V0, V1@Buf1, []).


'dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value64(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABSetupRequest_protocolIEs'(Enc2@element)
end].
'enc_E-RABSetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value65(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupRequest'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABSetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABSetupRequest',Term1},Bytes4}.


'dec_E-RABSetupRequest_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components66(V1@V0, V1@Buf1, []).


'dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value67(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupListBearerSUReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value68(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupListBearerSUReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components69(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value70(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupItemBearerSUReq'(Val) ->
[begin
Enc1@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
'S1AP-IEs':'enc_E-RABLevelQoSParameters'(Enc5@element)
end,
begin
Enc6@element = element(4, Val),
Enc7@bs = to_bitstring(Enc6@element, 1),
Enc7@bits = bit_size(Enc7@bs),
Enc7@bits@sub = Enc7@bits - 1,
if 0 =< Enc7@bits@sub, Enc7@bits@sub < 160 ->
[<<0:1,Enc7@bits@sub:8>>,
align|Enc7@bs];
Enc7@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc7@bits:14>>|Enc7@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc7@bs, 1)]
end
end,
align,
begin
Enc8@element = element(5, Val),
Enc9@bin = iolist_to_binary(Enc8@element),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len =:= 4 ->
Enc9@bin
end
end,
begin
Enc10@element = element(6, Val),
Enc11@bin = iolist_to_binary(Enc10@element),
Enc11@len = byte_size(Enc11@bin),
if Enc11@len < 128 ->
[Enc11@len|Enc11@bin];
Enc11@len < 16384 ->
[<<2:2,Enc11@len:14>>|Enc11@bin];
true ->
encode_fragmented(Enc11@bin, 8)
end
end|begin
Enc12@element = element(7, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Enc12@element)
end
end].
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupItemBearerSUReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'S1AP-IEs':'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type BIT STRING
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = begin
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:7,V6@V5:V6@V3/binary-unit:8,V6@Buf6/bitstring>> ->
{V6@V5,V6@Buf6};
<<1:1,0:1,V6@V4:14,V6@V6:V6@V4/binary-unit:8,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,1:1,V6@V4:6,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7}  = decode_fragmented(V6@V4, V6@Buf5, 8),
{V6@V6,V6@Buf7}
end,
V6@Conv8 = binary_to_list(V6@V0),
{V6@Conv8,V6@Buf1}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABToBeSetupItemBearerSUReq',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.


'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components71(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABSetupResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABSetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value72(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABSetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABSetupResponse',Term1},Bytes4}.


'dec_E-RABSetupResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components73(V1@V0, V1@Buf1, []).


'dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value74(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupListBearerSURes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value75(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupListBearerSURes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components76(V1@Add4, V1@Buf1, []).


'dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value77(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupItemBearerSURes'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bs = to_bitstring(Enc5@element, 1),
Enc6@bits = bit_size(Enc6@bs),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 4 ->
Enc8@bin
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupItemBearerSURes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABSetupItemBearerSURes_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABSetupItemBearerSURes',Term1,Term2,Term3,Term4},Bytes8}.


'dec_E-RABSetupItemBearerSURes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components78(V1@Add4, V1@Buf1, []).


'dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABModifyRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABModifyRequest_protocolIEs'(Enc2@element)
end].
'enc_E-RABModifyRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value79(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABModifyRequest'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABModifyRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABModifyRequest',Term1},Bytes4}.


'dec_E-RABModifyRequest_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components80(V1@V0, V1@Buf1, []).


'dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value81(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeModifiedListBearerModReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value82(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeModifiedListBearerModReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components83(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value84(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeModifiedItemBearerModReq'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
'S1AP-IEs':'enc_E-RABLevelQoSParameters'(Enc5@element)
end,
align,
begin
Enc6@element = element(4, Val),
Enc7@bin = iolist_to_binary(Enc6@element),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Enc8@element)
end
end].
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeModifiedItemBearerModReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'S1AP-IEs':'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary_to_list(V4@V0),
{V4@Conv10,V4@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeModifiedItemBearerModReq',Term1,Term2,Term3,Term4},Bytes8}.


'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components85(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABModifyResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABModifyResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABModifyResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value86(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABModifyResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABModifyResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABModifyResponse',Term1},Bytes4}.


'dec_E-RABModifyResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components87(V1@V0, V1@Buf1, []).


'dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value88(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABModifyListBearerModRes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value89(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABModifyListBearerModRes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components90(V1@Add4, V1@Buf1, []).


'dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value91(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABModifyItemBearerModRes'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Enc5@element)
end
end].
'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABModifyItemBearerModRes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_E-RABModifyItemBearerModRes_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'E-RABModifyItemBearerModRes',Term1,Term2},Bytes6}.


'dec_E-RABModifyItemBearerModRes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components92(V1@Add4, V1@Buf1, []).


'dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABReleaseCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseCommand_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value93(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABReleaseCommand'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseCommand',Term1},Bytes4}.


'dec_E-RABReleaseCommand_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components94(V1@V0, V1@Buf1, []).


'dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value95(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABReleaseResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value96(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABReleaseResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseResponse',Term1},Bytes4}.


'dec_E-RABReleaseResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components97(V1@V0, V1@Buf1, []).


'dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value98(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABReleaseListBearerRelComp'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value99(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABReleaseListBearerRelComp'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components100(V1@Add4, V1@Buf1, []).


'dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value101(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABReleaseItemBearerRelComp'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Enc5@element)
end
end].
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABReleaseItemBearerRelComp'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'E-RABReleaseItemBearerRelComp',Term1,Term2},Bytes6}.


'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components102(V1@Add4, V1@Buf1, []).


'dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_E-RABReleaseIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseIndication_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value103(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABReleaseIndication'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseIndication',Term1},Bytes4}.


'dec_E-RABReleaseIndication_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components104(V1@V0, V1@Buf1, []).


'dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value105(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_InitialContextSetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupRequest_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value106(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitialContextSetupRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupRequest',Term1},Bytes4}.


dec_InitialContextSetupRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components107(V1@V0, V1@Buf1, []).


'dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value108(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupListCtxtSUReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value109(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupListCtxtSUReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components110(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value111(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABToBeSetupItemCtxtSUReq'(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 4 =:= 0 ->
<<0:1,Enc4@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@element)]
end
end,
begin
Enc6@element = element(3, Val),
'S1AP-IEs':'enc_E-RABLevelQoSParameters'(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
Enc8@bs = to_bitstring(Enc7@element, 1),
Enc8@bits = bit_size(Enc8@bs),
Enc8@bits@sub = Enc8@bits - 1,
if 0 =< Enc8@bits@sub, Enc8@bits@sub < 160 ->
[<<0:1,Enc8@bits@sub:8>>,
align|Enc8@bs];
Enc8@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc8@bits:14>>|Enc8@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc8@bs, 1)]
end
end,
align,
begin
Enc9@element = element(5, Val),
Enc10@bin = iolist_to_binary(Enc9@element),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len =:= 4 ->
Enc10@bin
end
end,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@bin = iolist_to_binary(Enc11@element),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
encode_fragmented(Enc12@bin, 8)
end
end
end
end|begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Enc14@element)
end
end].
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'S1AP-IEs':'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type BIT STRING
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
V6@Conv10 = binary_to_list(V6@V0),
{V6@Conv10,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABToBeSetupItemCtxtSUReq',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.


'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components112(V1@Add4, V1@Buf1, []).


'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_InitialContextSetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupResponse_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value113(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitialContextSetupResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupResponse',Term1},Bytes4}.


dec_InitialContextSetupResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components114(V1@V0, V1@Buf1, []).


'dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value115(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupListCtxtSURes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value116(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupListCtxtSURes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components117(V1@Add4, V1@Buf1, []).


'dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value118(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_E-RABSetupItemCtxtSURes'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bs = to_bitstring(Enc5@element, 1),
Enc6@bits = bit_size(Enc6@bs),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@element),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 4 ->
Enc8@bin
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_E-RABSetupItemCtxtSURes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary_to_list(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABSetupItemCtxtSURes',Term1,Term2,Term3,Term4},Bytes8}.


'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components119(V1@Add4, V1@Buf1, []).


'dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_InitialContextSetupFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupFailure_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value120(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitialContextSetupFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupFailure',Term1},Bytes4}.


dec_InitialContextSetupFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components121(V1@V0, V1@Buf1, []).


'dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value122(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_Paging'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_Paging_protocolIEs(Enc2@element)
end].
'enc_Paging_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_Paging_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_Paging_protocolIEs_ProtocolIE-Field'(Val) ->
    enc_Paging_protocolIEs_ProtocolIE_internal(1, Val).

enc_Paging_protocolIEs_ProtocolIE_internal(1, Val) ->
    do_enc_Paging_protocolIEs_ProtocolIE(Val);
enc_Paging_protocolIEs_ProtocolIE_internal(N, Val) ->
    do_enc_Paging_protocolIEs_ProtocolIE(Val),
    enc_Paging_protocolIEs_ProtocolIE_internal(N - 1, Val).

do_enc_Paging_protocolIEs_ProtocolIE(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value123(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_Paging(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_Paging_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'Paging',Term1},Bytes4}.


dec_Paging_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components124(V1@V0, V1@Buf1, []).


'dec_Paging_protocolIEs_ProtocolIE-Field'(Bytes) ->
%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value125(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_TAIList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_TAIList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TAIList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value126(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_TAIList(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components127(V1@Add4, V1@Buf1, []).


'dec_TAIList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value128(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_TAIItem'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'S1AP-IEs':enc_TAI(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TAIItem_iE-Extensions'(Enc4@element)
end
end].
'enc_TAIItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TAIItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TAIItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_TAIItem(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TAI
{Term1,Bytes3} = 'S1AP-IEs':dec_TAI(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_TAIItem_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TAIItem',Term1,Term2},Bytes6}.


'dec_TAIItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components129(V1@Add4, V1@Buf1, []).


'dec_TAIItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.

'enc_UEContextReleaseRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseRequest_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value130(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextReleaseRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseRequest',Term1},Bytes4}.


dec_UEContextReleaseRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components131(V1@V0, V1@Buf1, []).


'dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value132(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UEContextReleaseCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseCommand_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value133(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextReleaseCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseCommand',Term1},Bytes4}.


dec_UEContextReleaseCommand_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components134(V1@V0, V1@Buf1, []).


'dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value135(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UEContextReleaseComplete'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseComplete_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseComplete_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value136(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextReleaseComplete(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseComplete_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseComplete',Term1},Bytes4}.


dec_UEContextReleaseComplete_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components137(V1@V0, V1@Buf1, []).


'dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Bytes) ->
     dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field_internal(100, Bytes).

dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field_internal(1, Bytes) ->
    do_dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field(Bytes);

dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field_internal(N, Bytes) ->
    do_dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field(Bytes),
    dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field_internal(N - 1, Bytes).



do_dec_UEContextReleaseComplete_protocolIEs_ProtocolIE_Field(Bytes) ->
%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value138(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UEContextModificationRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationRequest_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value139(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextModificationRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationRequest',Term1},Bytes4}.


dec_UEContextModificationRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components140(V1@V0, V1@Buf1, []).


'dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value141(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UEContextModificationResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationResponse_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value142(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextModificationResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationResponse',Term1},Bytes4}.


dec_UEContextModificationResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components143(V1@V0, V1@Buf1, []).


'dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value144(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UEContextModificationFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationFailure_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value145(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UEContextModificationFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationFailure',Term1},Bytes4}.


dec_UEContextModificationFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components146(V1@V0, V1@Buf1, []).


'dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value147(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_DownlinkNASTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkNASTransport_protocolIEs(Enc2@element)
end].
'enc_DownlinkNASTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value148(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_DownlinkNASTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkNASTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkNASTransport',Term1},Bytes4}.


dec_DownlinkNASTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components149(V1@V0, V1@Buf1, []).


'dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value150(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_InitialUEMessage'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialUEMessage_protocolIEs(Enc2@element)
end].
'enc_InitialUEMessage_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value151(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitialUEMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialUEMessage_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialUEMessage',Term1},Bytes4}.


dec_InitialUEMessage_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components152(V1@V0, V1@Buf1, []).


'dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value153(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UplinkNASTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkNASTransport_protocolIEs(Enc2@element)
end].
'enc_UplinkNASTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value154(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UplinkNASTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkNASTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkNASTransport',Term1},Bytes4}.


dec_UplinkNASTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components155(V1@V0, V1@Buf1, []).


'dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value156(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_NASNonDeliveryIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_NASNonDeliveryIndication_protocolIEs(Enc2@element)
end].
'enc_NASNonDeliveryIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value157(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_NASNonDeliveryIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_NASNonDeliveryIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'NASNonDeliveryIndication',Term1},Bytes4}.


dec_NASNonDeliveryIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components158(V1@V0, V1@Buf1, []).


'dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value159(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_Reset'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_Reset_protocolIEs(Enc2@element)
end].
'enc_Reset_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_Reset_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_Reset_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value160(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_Reset(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_Reset_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'Reset',Term1},Bytes4}.


dec_Reset_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components161(V1@V0, V1@Buf1, []).


'dec_Reset_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value162(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ResetType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 's1-Interface' ->
if ChoiceVal =:= 'reset-all' ->
<<0:1,0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'partOfS1-Interface' ->
[<<0:1,1:1>>|'enc_UE-associatedLogicalS1-ConnectionListRes'(ChoiceVal)]
end.


dec_ResetType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@Buf2/bitstring>> ->
{'reset-all',V2@Buf2};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{'s1-Interface',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UE-associatedLogicalS1-ConnectionListRes'(Bytes2)
end,
{{'partOfS1-Interface',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ResetAll'(Val) ->
if Val =:= 'reset-all' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ResetAll(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'reset-all',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_UE-associatedLogicalS1-ConnectionListRes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value163(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_UE-associatedLogicalS1-ConnectionListRes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components164(V1@Add4, V1@Buf1, []).


'dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value165(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ResetAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ResetAcknowledge_protocolIEs(Enc2@element)
end].
'enc_ResetAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value166(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ResetAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResetAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResetAcknowledge',Term1},Bytes4}.


dec_ResetAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components167(V1@V0, V1@Buf1, []).


'dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value168(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value169(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components170(V1@Add4, V1@Buf1, []).


'dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value171(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ErrorIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ErrorIndication_protocolIEs(Enc2@element)
end].
'enc_ErrorIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value172(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ErrorIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ErrorIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ErrorIndication',Term1},Bytes4}.


dec_ErrorIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components173(V1@V0, V1@Buf1, []).


'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value174(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_S1SetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupRequest_protocolIEs(Enc2@element)
end].
'enc_S1SetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value175(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_S1SetupRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupRequest',Term1},Bytes4}.


dec_S1SetupRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components176(V1@V0, V1@Buf1, []).


'dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value177(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_S1SetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupResponse_protocolIEs(Enc2@element)
end].
'enc_S1SetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value178(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_S1SetupResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupResponse',Term1},Bytes4}.


dec_S1SetupResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components179(V1@V0, V1@Buf1, []).


'dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value180(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_S1SetupFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupFailure_protocolIEs(Enc2@element)
end].
'enc_S1SetupFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value181(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_S1SetupFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupFailure',Term1},Bytes4}.


dec_S1SetupFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components182(V1@V0, V1@Buf1, []).


'dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value183(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBConfigurationUpdate'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdate_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value184(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBConfigurationUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdate',Term1},Bytes4}.


dec_ENBConfigurationUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components185(V1@V0, V1@Buf1, []).


'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value186(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBConfigurationUpdateAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdateAcknowledge_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value187(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBConfigurationUpdateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateAcknowledge',Term1},Bytes4}.


dec_ENBConfigurationUpdateAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components188(V1@V0, V1@Buf1, []).


'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value189(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBConfigurationUpdateFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdateFailure_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdateFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value190(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBConfigurationUpdateFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateFailure',Term1},Bytes4}.


dec_ENBConfigurationUpdateFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components191(V1@V0, V1@Buf1, []).


'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value192(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_MMEConfigurationUpdate'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdate_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value193(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEConfigurationUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdate',Term1},Bytes4}.


dec_MMEConfigurationUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components194(V1@V0, V1@Buf1, []).


'dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value195(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_MMEConfigurationUpdateAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdateAcknowledge_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdateAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value196(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEConfigurationUpdateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdateAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdateAcknowledge',Term1},Bytes4}.


dec_MMEConfigurationUpdateAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components197(V1@V0, V1@Buf1, []).


'dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value198(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_MMEConfigurationUpdateFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdateFailure_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdateFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value199(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEConfigurationUpdateFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdateFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdateFailure',Term1},Bytes4}.


dec_MMEConfigurationUpdateFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components200(V1@V0, V1@Buf1, []).


'dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value201(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_DownlinkS1cdma2000tunneling'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkS1cdma2000tunneling_protocolIEs(Enc2@element)
end].
'enc_DownlinkS1cdma2000tunneling_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value202(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_DownlinkS1cdma2000tunneling(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkS1cdma2000tunneling_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkS1cdma2000tunneling',Term1},Bytes4}.


dec_DownlinkS1cdma2000tunneling_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components203(V1@V0, V1@Buf1, []).


'dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value204(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UplinkS1cdma2000tunneling'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkS1cdma2000tunneling_protocolIEs(Enc2@element)
end].
'enc_UplinkS1cdma2000tunneling_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value205(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UplinkS1cdma2000tunneling(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkS1cdma2000tunneling_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkS1cdma2000tunneling',Term1},Bytes4}.


dec_UplinkS1cdma2000tunneling_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components206(V1@V0, V1@Buf1, []).


'dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value207(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UECapabilityInfoIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UECapabilityInfoIndication_protocolIEs(Enc2@element)
end].
'enc_UECapabilityInfoIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value208(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UECapabilityInfoIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UECapabilityInfoIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UECapabilityInfoIndication',Term1},Bytes4}.


dec_UECapabilityInfoIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components209(V1@V0, V1@Buf1, []).


'dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value210(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBStatusTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBStatusTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBStatusTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value211(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBStatusTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBStatusTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBStatusTransfer',Term1},Bytes4}.


dec_ENBStatusTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components212(V1@V0, V1@Buf1, []).


'dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value213(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_MMEStatusTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEStatusTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEStatusTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value214(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEStatusTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEStatusTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEStatusTransfer',Term1},Bytes4}.


dec_MMEStatusTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components215(V1@V0, V1@Buf1, []).


'dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value216(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_TraceStart'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_TraceStart_protocolIEs(Enc2@element)
end].
'enc_TraceStart_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_TraceStart_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TraceStart_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value217(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_TraceStart(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_TraceStart_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TraceStart',Term1},Bytes4}.


dec_TraceStart_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components218(V1@V0, V1@Buf1, []).


'dec_TraceStart_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value219(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_TraceFailureIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_TraceFailureIndication_protocolIEs(Enc2@element)
end].
'enc_TraceFailureIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value220(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_TraceFailureIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_TraceFailureIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TraceFailureIndication',Term1},Bytes4}.


dec_TraceFailureIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components221(V1@V0, V1@Buf1, []).


'dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value222(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_DeactivateTrace'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DeactivateTrace_protocolIEs(Enc2@element)
end].
'enc_DeactivateTrace_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value223(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_DeactivateTrace(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DeactivateTrace_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DeactivateTrace',Term1},Bytes4}.


dec_DeactivateTrace_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components224(V1@V0, V1@Buf1, []).


'dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value225(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_CellTrafficTrace'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_CellTrafficTrace_protocolIEs(Enc2@element)
end].
'enc_CellTrafficTrace_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value226(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_CellTrafficTrace(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_CellTrafficTrace_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CellTrafficTrace',Term1},Bytes4}.


dec_CellTrafficTrace_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components227(V1@V0, V1@Buf1, []).


'dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value228(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_LocationReportingControl'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReportingControl_protocolIEs(Enc2@element)
end].
'enc_LocationReportingControl_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value229(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_LocationReportingControl(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReportingControl_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReportingControl',Term1},Bytes4}.


dec_LocationReportingControl_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components230(V1@V0, V1@Buf1, []).


'dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value231(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_LocationReportingFailureIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReportingFailureIndication_protocolIEs(Enc2@element)
end].
'enc_LocationReportingFailureIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value232(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_LocationReportingFailureIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReportingFailureIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReportingFailureIndication',Term1},Bytes4}.


dec_LocationReportingFailureIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components233(V1@V0, V1@Buf1, []).


'dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value234(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_LocationReport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReport_protocolIEs(Enc2@element)
end].
'enc_LocationReport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value235(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_LocationReport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReport',Term1},Bytes4}.


dec_LocationReport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components236(V1@V0, V1@Buf1, []).


'dec_LocationReport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value237(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_OverloadStart'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_OverloadStart_protocolIEs(Enc2@element)
end].
'enc_OverloadStart_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_OverloadStart_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_OverloadStart_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value238(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_OverloadStart(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_OverloadStart_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'OverloadStart',Term1},Bytes4}.


dec_OverloadStart_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components239(V1@V0, V1@Buf1, []).


'dec_OverloadStart_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value240(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_OverloadStop'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_OverloadStop_protocolIEs(Enc2@element)
end].
'enc_OverloadStop_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_OverloadStop_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_OverloadStop_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension10(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_OverloadStop(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_OverloadStop_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'OverloadStop',Term1},Bytes4}.


dec_OverloadStop_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components241(V1@V0, V1@Buf1, []).


'dec_OverloadStop_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension12(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_WriteReplaceWarningRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_WriteReplaceWarningRequest_protocolIEs(Enc2@element)
end].
'enc_WriteReplaceWarningRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value242(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_WriteReplaceWarningRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_WriteReplaceWarningRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'WriteReplaceWarningRequest',Term1},Bytes4}.


dec_WriteReplaceWarningRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components243(V1@V0, V1@Buf1, []).


'dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value244(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_WriteReplaceWarningResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_WriteReplaceWarningResponse_protocolIEs(Enc2@element)
end].
'enc_WriteReplaceWarningResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value245(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_WriteReplaceWarningResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_WriteReplaceWarningResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'WriteReplaceWarningResponse',Term1},Bytes4}.


dec_WriteReplaceWarningResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components246(V1@V0, V1@Buf1, []).


'dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value247(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBDirectInformationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBDirectInformationTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBDirectInformationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value248(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBDirectInformationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBDirectInformationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBDirectInformationTransfer',Term1},Bytes4}.


dec_ENBDirectInformationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components249(V1@V0, V1@Buf1, []).


'dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value250(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_Inter-SystemInformationTransferType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rIMTransfer ->
[<<0:1>>|'S1AP-IEs':enc_RIMTransfer(ChoiceVal)]
end.


'dec_Inter-SystemInformationTransferType'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'S1AP-IEs':dec_RIMTransfer(Bytes2)
end,
{{rIMTransfer,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_MMEDirectInformationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEDirectInformationTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEDirectInformationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value251(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEDirectInformationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEDirectInformationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEDirectInformationTransfer',Term1},Bytes4}.


dec_MMEDirectInformationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components252(V1@V0, V1@Buf1, []).


'dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value253(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_ENBConfigurationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value254(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_ENBConfigurationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationTransfer',Term1},Bytes4}.


dec_ENBConfigurationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components255(V1@V0, V1@Buf1, []).


'dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value256(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_MMEConfigurationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value257(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_MMEConfigurationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationTransfer',Term1},Bytes4}.


dec_MMEConfigurationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components258(V1@V0, V1@Buf1, []).


'dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value259(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_PrivateMessage'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PrivateMessage_privateIEs(Enc2@element)
end].
'enc_PrivateMessage_privateIEs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_PrivateMessage_privateIEs_PrivateIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PrivateMessage_privateIEs_PrivateIE-Field'(Val) ->
[begin
Enc1@element = element(2, Val),
'S1AP-CommonDataTypes':'enc_PrivateIE-ID'(Enc1@element)
end,
begin
Enc2@element = element(3, Val),
if Enc2@element =:= reject ->
<<0:2>>;
Enc2@element =:= ignore ->
<<1:2>>;
Enc2@element =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
align|begin
Enc4@element = element(4, Val),
Enc5@output = iolist_to_binary(Enc4@element),
Enc5@bin = Enc5@output,
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_PrivateMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PrivateMessage_privateIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PrivateMessage',Term1},Bytes4}.


dec_PrivateMessage_privateIEs(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components260(V1@Add4, V1@Buf1, []).


'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes) ->

%% attribute number 1 with type PrivateIE-ID
{Term1,Bytes1} = 'S1AP-CommonDataTypes':'dec_PrivateIE-ID'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reject,ignore,notify]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type ASN1_OPEN_TYPE
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
{V2@V0,V2@Buf1}
end,
{{'PrivateIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_KillRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_KillRequest_protocolIEs(Enc2@element)
end].
'enc_KillRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_KillRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_KillRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value261(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_KillRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_KillRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'KillRequest',Term1},Bytes4}.


dec_KillRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components262(V1@V0, V1@Buf1, []).


'dec_KillRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value263(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_KillResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_KillResponse_protocolIEs(Enc2@element)
end].
'enc_KillResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_KillResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_KillResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value264(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_KillResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_KillResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'KillResponse',Term1},Bytes4}.


dec_KillResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components265(V1@V0, V1@Buf1, []).


'dec_KillResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value266(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_DownlinkUEAssociatedLPPaTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkUEAssociatedLPPaTransport_protocolIEs(Enc2@element)
end].
'enc_DownlinkUEAssociatedLPPaTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value267(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_DownlinkUEAssociatedLPPaTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkUEAssociatedLPPaTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkUEAssociatedLPPaTransport',Term1},Bytes4}.


dec_DownlinkUEAssociatedLPPaTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components268(V1@V0, V1@Buf1, []).


'dec_DownlinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value269(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UplinkUEAssociatedLPPaTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkUEAssociatedLPPaTransport_protocolIEs(Enc2@element)
end].
'enc_UplinkUEAssociatedLPPaTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value270(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UplinkUEAssociatedLPPaTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkUEAssociatedLPPaTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkUEAssociatedLPPaTransport',Term1},Bytes4}.


dec_UplinkUEAssociatedLPPaTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components271(V1@V0, V1@Buf1, []).


'dec_UplinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value272(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_DownlinkNonUEAssociatedLPPaTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkNonUEAssociatedLPPaTransport_protocolIEs(Enc2@element)
end].
'enc_DownlinkNonUEAssociatedLPPaTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value273(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_DownlinkNonUEAssociatedLPPaTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkNonUEAssociatedLPPaTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkNonUEAssociatedLPPaTransport',Term1},Bytes4}.


dec_DownlinkNonUEAssociatedLPPaTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components274(V1@V0, V1@Buf1, []).


'dec_DownlinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value275(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.

'enc_UplinkNonUEAssociatedLPPaTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkNonUEAssociatedLPPaTransport_protocolIEs(Enc2@element)
end].
'enc_UplinkNonUEAssociatedLPPaTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value276(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UplinkNonUEAssociatedLPPaTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkNonUEAssociatedLPPaTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkNonUEAssociatedLPPaTransport',Term1},Bytes4}.


dec_UplinkNonUEAssociatedLPPaTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components277(V1@V0, V1@Buf1, []).


'dec_UplinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value278(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    _ = complete(Arg),
    ok.

dec_components100(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components100(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Bytes),
dec_components100(Num-1, Remain, [Term|Acc]).

dec_components102(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components102(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components102(Num-1, Remain, [Term|Acc]).

dec_components104(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components104(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components104(Num-1, Remain, [Term|Acc]).

dec_components107(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components107(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components107(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components110(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components110(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Bytes),
dec_components110(Num-1, Remain, [Term|Acc]).

dec_components112(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components112(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components112(Num-1, Remain, [Term|Acc]).

dec_components114(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components114(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components114(Num-1, Remain, [Term|Acc]).

dec_components117(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components117(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Bytes),
dec_components117(Num-1, Remain, [Term|Acc]).

dec_components119(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components119(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components119(Num-1, Remain, [Term|Acc]).

dec_components121(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components121(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components121(Num-1, Remain, [Term|Acc]).

dec_components124(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components124(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Paging_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components124(Num-1, Remain, [Term|Acc]).

dec_components127(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components127(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAIList_ProtocolIE-Field'(Bytes),
dec_components127(Num-1, Remain, [Term|Acc]).

dec_components129(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components129(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAIItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components129(Num-1, Remain, [Term|Acc]).

dec_components131(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components131(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components131(Num-1, Remain, [Term|Acc]).

dec_components134(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components134(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components134(Num-1, Remain, [Term|Acc]).

dec_components137(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components137(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components137(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components140(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components140(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components140(Num-1, Remain, [Term|Acc]).

dec_components143(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components143(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components143(Num-1, Remain, [Term|Acc]).

dec_components146(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components146(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components146(Num-1, Remain, [Term|Acc]).

dec_components149(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components149(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components149(Num-1, Remain, [Term|Acc]).

dec_components152(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components152(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components152(Num-1, Remain, [Term|Acc]).

dec_components155(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components155(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components155(Num-1, Remain, [Term|Acc]).

dec_components158(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components158(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components158(Num-1, Remain, [Term|Acc]).

dec_components161(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components161(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Reset_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components161(Num-1, Remain, [Term|Acc]).

dec_components164(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components164(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Bytes),
dec_components164(Num-1, Remain, [Term|Acc]).

dec_components167(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components167(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components167(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components170(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components170(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Bytes),
dec_components170(Num-1, Remain, [Term|Acc]).

dec_components173(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components173(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components173(Num-1, Remain, [Term|Acc]).

dec_components176(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components176(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components176(Num-1, Remain, [Term|Acc]).

dec_components179(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components179(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components179(Num-1, Remain, [Term|Acc]).

dec_components182(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components182(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components182(Num-1, Remain, [Term|Acc]).

dec_components185(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components185(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components185(Num-1, Remain, [Term|Acc]).

dec_components188(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components188(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components188(Num-1, Remain, [Term|Acc]).

dec_components191(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components191(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components191(Num-1, Remain, [Term|Acc]).

dec_components194(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components194(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components194(Num-1, Remain, [Term|Acc]).

dec_components197(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components197(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components197(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components200(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components200(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components200(Num-1, Remain, [Term|Acc]).

dec_components203(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components203(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components203(Num-1, Remain, [Term|Acc]).

dec_components206(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components206(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components206(Num-1, Remain, [Term|Acc]).

dec_components209(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components209(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components209(Num-1, Remain, [Term|Acc]).

dec_components212(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components212(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components212(Num-1, Remain, [Term|Acc]).

dec_components215(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components215(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components215(Num-1, Remain, [Term|Acc]).

dec_components218(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components218(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceStart_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components218(Num-1, Remain, [Term|Acc]).

dec_components221(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components221(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components221(Num-1, Remain, [Term|Acc]).

dec_components224(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components224(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components224(Num-1, Remain, [Term|Acc]).

dec_components227(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components227(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components227(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components230(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components230(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components230(Num-1, Remain, [Term|Acc]).

dec_components233(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components233(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components233(Num-1, Remain, [Term|Acc]).

dec_components236(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components236(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components236(Num-1, Remain, [Term|Acc]).

dec_components239(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components239(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_OverloadStart_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components239(Num-1, Remain, [Term|Acc]).

dec_components241(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components241(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_OverloadStop_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components241(Num-1, Remain, [Term|Acc]).

dec_components243(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components243(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components243(Num-1, Remain, [Term|Acc]).

dec_components246(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components246(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components246(Num-1, Remain, [Term|Acc]).

dec_components249(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components249(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components249(Num-1, Remain, [Term|Acc]).

dec_components252(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components252(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components252(Num-1, Remain, [Term|Acc]).

dec_components255(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components255(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components255(Num-1, Remain, [Term|Acc]).

dec_components258(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components258(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components258(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components260(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components260(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes),
dec_components260(Num-1, Remain, [Term|Acc]).

dec_components262(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components262(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_KillRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components262(Num-1, Remain, [Term|Acc]).

dec_components265(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components265(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_KillResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components265(Num-1, Remain, [Term|Acc]).

dec_components268(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components268(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components268(Num-1, Remain, [Term|Acc]).

dec_components271(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components271(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components271(Num-1, Remain, [Term|Acc]).

dec_components274(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components274(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components274(Num-1, Remain, [Term|Acc]).

dec_components277(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components277(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkNonUEAssociatedLPPaTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components277(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABAdmittedList_ProtocolIE-Field'(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Bytes),
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Bytes),
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(Bytes),
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components55(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components55(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components55(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components69(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components69(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Bytes),
dec_components69(Num-1, Remain, [Term|Acc]).

dec_components71(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components71(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components71(Num-1, Remain, [Term|Acc]).

dec_components73(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components73(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components73(Num-1, Remain, [Term|Acc]).

dec_components76(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components76(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(Bytes),
dec_components76(Num-1, Remain, [Term|Acc]).

dec_components78(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components78(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components78(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components80(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components80(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components80(Num-1, Remain, [Term|Acc]).

dec_components83(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components83(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Bytes),
dec_components83(Num-1, Remain, [Term|Acc]).

dec_components85(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components85(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components85(Num-1, Remain, [Term|Acc]).

dec_components87(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components87(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components87(Num-1, Remain, [Term|Acc]).

dec_components90(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components90(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(Bytes),
dec_components90(Num-1, Remain, [Term|Acc]).

dec_components92(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components92(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components92(Num-1, Remain, [Term|Acc]).

dec_components94(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components94(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components94(Num-1, Remain, [Term|Acc]).

dec_components97(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components97(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components97(Num-1, Remain, [Term|Acc]).

dec_os_Extension12(Bytes, Id) ->
Bytes.


dec_os_Extension24(Bytes, 143) ->
{Term,_} = 'S1AP-IEs':'dec_Data-Forwarding-Not-Possible'(Bytes),
Term;
dec_os_Extension24(Bytes, Id) ->
Bytes.


dec_os_Value101(Bytes, 15) ->
{Term,_} = 'dec_E-RABReleaseItemBearerRelComp'(Bytes),
Term;
dec_os_Value101(Bytes, Id) ->
Bytes.


dec_os_Value105(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value105(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value105(Bytes, 110) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value105(Bytes, 189) ->
{Term,_} = 'S1AP-IEs':dec_UserLocationInformation(Bytes),
Term;
dec_os_Value105(Bytes, Id) ->
Bytes.


dec_os_Value108(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value108(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value108(Bytes, 24) ->
{Term,_} = 'dec_E-RABToBeSetupListCtxtSUReq'(Bytes),
Term;
dec_os_Value108(Bytes, 25) ->
{Term,_} = 'S1AP-IEs':dec_TraceActivation(Bytes),
Term;
dec_os_Value108(Bytes, 41) ->
{Term,_} = 'S1AP-IEs':dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value108(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value108(Bytes, 73) ->
{Term,_} = 'S1AP-IEs':dec_SecurityKey(Bytes),
Term;
dec_os_Value108(Bytes, 74) ->
{Term,_} = 'S1AP-IEs':dec_UERadioCapability(Bytes),
Term;
dec_os_Value108(Bytes, 106) ->
{Term,_} = 'S1AP-IEs':dec_SubscriberProfileIDforRFP(Bytes),
Term;
dec_os_Value108(Bytes, 107) ->
{Term,_} = 'S1AP-IEs':dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value108(Bytes, 108) ->
{Term,_} = 'S1AP-IEs':dec_CSFallbackIndicator(Bytes),
Term;
dec_os_Value108(Bytes, 124) ->
{Term,_} = 'S1AP-IEs':dec_SRVCCOperationPossible(Bytes),
Term;
dec_os_Value108(Bytes, 146) ->
{Term,_} = 'S1AP-IEs':dec_CSGMembershipStatus(Bytes),
Term;
dec_os_Value108(Bytes, 159) ->
{Term,_} = 'S1AP-IEs':dec_LAI(Bytes),
Term;
dec_os_Value108(Bytes, 192) ->
{Term,_} = 'S1AP-IEs':'dec_Masked-IMEISV'(Bytes),
Term;
dec_os_Value108(Bytes, Id) ->
Bytes.


dec_os_Value111(Bytes, 52) ->
{Term,_} = 'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes),
Term;
dec_os_Value111(Bytes, Id) ->
Bytes.


dec_os_Value115(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value115(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value115(Bytes, 48) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value115(Bytes, 51) ->
{Term,_} = 'dec_E-RABSetupListCtxtSURes'(Bytes),
Term;
dec_os_Value115(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value115(Bytes, Id) ->
Bytes.


dec_os_Value118(Bytes, 50) ->
{Term,_} = 'dec_E-RABSetupItemCtxtSURes'(Bytes),
Term;
dec_os_Value118(Bytes, Id) ->
Bytes.


dec_os_Value122(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value122(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value122(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value122(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value122(Bytes, Id) ->
Bytes.


dec_os_Value125(Bytes, 43) ->
{Term,_} = 'S1AP-IEs':dec_UEPagingID(Bytes),
Term;
dec_os_Value125(Bytes, 44) ->
{Term,_} = 'S1AP-IEs':dec_PagingDRX(Bytes),
Term;
dec_os_Value125(Bytes, 46) ->
{Term,_} = dec_TAIList(Bytes),
Term;
dec_os_Value125(Bytes, 80) ->
{Term,_} = 'S1AP-IEs':dec_UEIdentityIndexValue(Bytes),
Term;
dec_os_Value125(Bytes, 109) ->
{Term,_} = 'S1AP-IEs':dec_CNDomain(Bytes),
Term;
dec_os_Value125(Bytes, 128) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value125(Bytes, 151) ->
{Term,_} = 'S1AP-IEs':dec_PagingPriority(Bytes),
Term;
dec_os_Value125(Bytes, 198) ->
{Term,_} = 'S1AP-IEs':dec_UERadioCapabilityForPaging(Bytes),
Term;
dec_os_Value125(Bytes, 211) ->
{Term,_} = 'S1AP-IEs':dec_AssistanceDataForPaging(Bytes),
Term;
dec_os_Value125(Bytes, Id) ->
Bytes.


dec_os_Value128(Bytes, 47) ->
{Term,_} = dec_TAIItem(Bytes),
Term;
dec_os_Value128(Bytes, Id) ->
Bytes.


dec_os_Value132(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value132(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value132(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value132(Bytes, Id) ->
Bytes.


dec_os_Value135(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value135(Bytes, 99) ->
{Term,_} = 'S1AP-IEs':'dec_UE-S1AP-IDs'(Bytes),
Term;
dec_os_Value135(Bytes, Id) ->
Bytes.


dec_os_Value138(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value138(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value138(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value138(Bytes, 189) ->
{Term,_} = 'S1AP-IEs':dec_UserLocationInformation(Bytes),
Term;
dec_os_Value138(Bytes, 212) ->
{Term,_} = 'S1AP-IEs':dec_CellIdentifierAndCELevelForCECapableUEs(Bytes),
Term;
dec_os_Value138(Bytes, 213) ->
%{Term_, _} = 'S1AP-IEs':dec_InformationOnRecommendedCellsAndENBsForPaging(Bytes),
Term = silver_decoder:dec_InformationOnRecommendedCellsAndENBsForPaging(Bytes),
Term.


dec_os_Value141(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value141(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value141(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value141(Bytes, 73) ->
{Term,_} = 'S1AP-IEs':dec_SecurityKey(Bytes),
Term;
dec_os_Value141(Bytes, 106) ->
{Term,_} = 'S1AP-IEs':dec_SubscriberProfileIDforRFP(Bytes),
Term;
dec_os_Value141(Bytes, 107) ->
{Term,_} = 'S1AP-IEs':dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value141(Bytes, 108) ->
{Term,_} = 'S1AP-IEs':dec_CSFallbackIndicator(Bytes),
Term;
dec_os_Value141(Bytes, 146) ->
{Term,_} = 'S1AP-IEs':dec_CSGMembershipStatus(Bytes),
Term;
dec_os_Value141(Bytes, 159) ->
{Term,_} = 'S1AP-IEs':dec_LAI(Bytes),
Term;
dec_os_Value141(Bytes, Id) ->
Bytes.


dec_os_Value144(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value144(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value144(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value144(Bytes, Id) ->
Bytes.


dec_os_Value147(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value147(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value147(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value147(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value147(Bytes, Id) ->
Bytes.


dec_os_Value15(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value15(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value15(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value15(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value15(Bytes, Id) ->
Bytes.


dec_os_Value150(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value150(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value150(Bytes, 26) ->
{Term,_} = 'S1AP-IEs':'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value150(Bytes, 41) ->
{Term,_} = 'S1AP-IEs':dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value150(Bytes, 106) ->
{Term,_} = 'S1AP-IEs':dec_SubscriberProfileIDforRFP(Bytes),
Term;
dec_os_Value150(Bytes, Id) ->
Bytes.


dec_os_Value153(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value153(Bytes, 26) ->
{Term,_} = 'S1AP-IEs':'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value153(Bytes, 67) ->
{Term,_} = 'S1AP-IEs':dec_TAI(Bytes),
Term;
dec_os_Value153(Bytes, 75) ->
{Term,_} = 'S1AP-IEs':dec_GUMMEI(Bytes),
Term;
dec_os_Value153(Bytes, 96) ->
{Term,_} = 'S1AP-IEs':'dec_S-TMSI'(Bytes),
Term;
dec_os_Value153(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value153(Bytes, 127) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-Id'(Bytes),
Term;
dec_os_Value153(Bytes, 134) ->
{Term,_} = 'S1AP-IEs':'dec_RRC-Establishment-Cause'(Bytes),
Term;
dec_os_Value153(Bytes, 145) ->
{Term,_} = 'S1AP-IEs':dec_CellAccessMode(Bytes),
Term;
dec_os_Value153(Bytes, Id) ->
Bytes.


dec_os_Value156(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value156(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value156(Bytes, 26) ->
{Term,_} = 'S1AP-IEs':'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value156(Bytes, 67) ->
{Term,_} = 'S1AP-IEs':dec_TAI(Bytes),
Term;
dec_os_Value156(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value156(Bytes, Id) ->
Bytes.


dec_os_Value159(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value159(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value159(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value159(Bytes, 26) ->
{Term,_} = 'S1AP-IEs':'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value159(Bytes, Id) ->
Bytes.


dec_os_Value162(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value162(Bytes, 92) ->
{Term,_} = dec_ResetType(Bytes),
Term;
dec_os_Value162(Bytes, Id) ->
Bytes.


dec_os_Value165(Bytes, 91) ->
{Term,_} = 'S1AP-IEs':'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes),
Term;
dec_os_Value165(Bytes, Id) ->
Bytes.


dec_os_Value168(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value168(Bytes, 93) ->
{Term,_} = 'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes),
Term;
dec_os_Value168(Bytes, Id) ->
Bytes.


dec_os_Value171(Bytes, 91) ->
{Term,_} = 'S1AP-IEs':'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes),
Term;
dec_os_Value171(Bytes, Id) ->
Bytes.


dec_os_Value174(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value174(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value174(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value174(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value174(Bytes, Id) ->
Bytes.


dec_os_Value177(Bytes, 59) ->
{Term,_} = 'S1AP-IEs':'dec_Global-ENB-ID'(Bytes),
Term;
dec_os_Value177(Bytes, 60) ->
{Term,_} = 'S1AP-IEs':dec_ENBname(Bytes),
Term;
dec_os_Value177(Bytes, 64) ->
{Term,_} = 'S1AP-IEs':dec_SupportedTAs(Bytes),
Term;
dec_os_Value177(Bytes, 128) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value177(Bytes, 137) ->
{Term,_} = 'S1AP-IEs':dec_PagingDRX(Bytes),
Term;
dec_os_Value177(Bytes, 43229) ->
{Term,_} = 'S1AP-Ericsson-IEs':'dec_EAB-S1SetupRequest-ExtConveyor'(Bytes),
Term;
dec_os_Value177(Bytes, Id) ->
Bytes.


dec_os_Value18(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value18(Bytes, 1) ->
{Term,_} = 'S1AP-IEs':dec_HandoverType(Bytes),
Term;
dec_os_Value18(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value18(Bytes, 25) ->
{Term,_} = 'S1AP-IEs':dec_TraceActivation(Bytes),
Term;
dec_os_Value18(Bytes, 40) ->
{Term,_} = 'S1AP-IEs':dec_SecurityContext(Bytes),
Term;
dec_os_Value18(Bytes, 41) ->
{Term,_} = 'S1AP-IEs':dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value18(Bytes, 53) ->
{Term,_} = 'dec_E-RABToBeSetupListHOReq'(Bytes),
Term;
dec_os_Value18(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value18(Bytes, 98) ->
{Term,_} = 'S1AP-IEs':dec_RequestType(Bytes),
Term;
dec_os_Value18(Bytes, 104) ->
{Term,_} = 'S1AP-IEs':'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value18(Bytes, 107) ->
{Term,_} = 'S1AP-IEs':dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value18(Bytes, 124) ->
{Term,_} = 'S1AP-IEs':dec_SRVCCOperationPossible(Bytes),
Term;
dec_os_Value18(Bytes, 127) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-Id'(Bytes),
Term;
dec_os_Value18(Bytes, 136) ->
{Term,_} = 'S1AP-IEs':'dec_NASSecurityParameterstoE-UTRAN'(Bytes),
Term;
dec_os_Value18(Bytes, 146) ->
{Term,_} = 'S1AP-IEs':dec_CSGMembershipStatus(Bytes),
Term;
dec_os_Value18(Bytes, 192) ->
{Term,_} = 'S1AP-IEs':'dec_Masked-IMEISV'(Bytes),
Term;
dec_os_Value18(Bytes, Id) ->
Bytes.


dec_os_Value180(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value180(Bytes, 61) ->
{Term,_} = 'S1AP-IEs':dec_MMEname(Bytes),
Term;
dec_os_Value180(Bytes, 87) ->
{Term,_} = 'S1AP-IEs':dec_RelativeMMECapacity(Bytes),
Term;
dec_os_Value180(Bytes, 105) ->
{Term,_} = 'S1AP-IEs':dec_ServedGUMMEIs(Bytes),
Term;
dec_os_Value180(Bytes, 43229) ->
{Term,_} = 'S1AP-Ericsson-IEs':'dec_EAB-S1SetupResponse-ExtConveyor'(Bytes),
Term;
dec_os_Value180(Bytes, Id) ->
Bytes.


dec_os_Value183(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value183(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value183(Bytes, 65) ->
{Term,_} = 'S1AP-IEs':dec_TimeToWait(Bytes),
Term;
dec_os_Value183(Bytes, Id) ->
Bytes.


dec_os_Value186(Bytes, 60) ->
{Term,_} = 'S1AP-IEs':dec_ENBname(Bytes),
Term;
dec_os_Value186(Bytes, 64) ->
{Term,_} = 'S1AP-IEs':dec_SupportedTAs(Bytes),
Term;
dec_os_Value186(Bytes, 128) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value186(Bytes, 137) ->
{Term,_} = 'S1AP-IEs':dec_PagingDRX(Bytes),
Term;
dec_os_Value186(Bytes, 43229) ->
{Term,_} = 'S1AP-Ericsson-IEs':'dec_EAB-ENBConfigurationUpdate-ExtConveyor'(Bytes),
Term;
dec_os_Value186(Bytes, Id) ->
Bytes.


dec_os_Value189(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value189(Bytes, Id) ->
Bytes.


dec_os_Value192(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value192(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value192(Bytes, 65) ->
{Term,_} = 'S1AP-IEs':dec_TimeToWait(Bytes),
Term;
dec_os_Value192(Bytes, Id) ->
Bytes.


dec_os_Value195(Bytes, 61) ->
{Term,_} = 'S1AP-IEs':dec_MMEname(Bytes),
Term;
dec_os_Value195(Bytes, 87) ->
{Term,_} = 'S1AP-IEs':dec_RelativeMMECapacity(Bytes),
Term;
dec_os_Value195(Bytes, 105) ->
{Term,_} = 'S1AP-IEs':dec_ServedGUMMEIs(Bytes),
Term;
dec_os_Value195(Bytes, 43229) ->
{Term,_} = 'S1AP-Ericsson-IEs':'dec_EAB-MMEConfigurationUpdate-ExtConveyor'(Bytes),
Term;
dec_os_Value195(Bytes, Id) ->
Bytes.


dec_os_Value198(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value198(Bytes, Id) ->
Bytes.


dec_os_Value201(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value201(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value201(Bytes, 65) ->
{Term,_} = 'S1AP-IEs':dec_TimeToWait(Bytes),
Term;
dec_os_Value201(Bytes, Id) ->
Bytes.


dec_os_Value204(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value204(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value204(Bytes, 12) ->
{Term,_} = 'dec_E-RABSubjecttoDataForwardingList'(Bytes),
Term;
dec_os_Value204(Bytes, 70) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000PDU(Bytes),
Term;
dec_os_Value204(Bytes, 71) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000RATType(Bytes),
Term;
dec_os_Value204(Bytes, 83) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000HOStatus(Bytes),
Term;
dec_os_Value204(Bytes, Id) ->
Bytes.


dec_os_Value207(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value207(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value207(Bytes, 70) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000PDU(Bytes),
Term;
dec_os_Value207(Bytes, 71) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000RATType(Bytes),
Term;
dec_os_Value207(Bytes, 72) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000SectorID(Bytes),
Term;
dec_os_Value207(Bytes, 84) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000HORequiredIndication(Bytes),
Term;
dec_os_Value207(Bytes, 97) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000OneXRAND(Bytes),
Term;
dec_os_Value207(Bytes, 102) ->
{Term,_} = 'S1AP-IEs':dec_Cdma2000OneXSRVCCInfo(Bytes),
Term;
dec_os_Value207(Bytes, 140) ->
{Term,_} = 'S1AP-IEs':dec_EUTRANRoundTripDelayEstimationInfo(Bytes),
Term;
dec_os_Value207(Bytes, Id) ->
Bytes.


dec_os_Value21(Bytes, 27) ->
{Term,_} = 'dec_E-RABToBeSetupItemHOReq'(Bytes),
Term;
dec_os_Value21(Bytes, Id) ->
Bytes.


dec_os_Value210(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value210(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value210(Bytes, 74) ->
{Term,_} = 'S1AP-IEs':dec_UERadioCapability(Bytes),
Term;
dec_os_Value210(Bytes, 198) ->
{Term,_} = 'S1AP-IEs':dec_UERadioCapabilityForPaging(Bytes),
Term;
dec_os_Value210(Bytes, Id) ->
Bytes.


dec_os_Value213(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value213(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value213(Bytes, 90) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-StatusTransfer-TransparentContainer'(Bytes),
Term;
dec_os_Value213(Bytes, Id) ->
Bytes.


dec_os_Value216(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value216(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value216(Bytes, 90) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-StatusTransfer-TransparentContainer'(Bytes),
Term;
dec_os_Value216(Bytes, Id) ->
Bytes.


dec_os_Value219(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value219(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value219(Bytes, 25) ->
{Term,_} = 'S1AP-IEs':dec_TraceActivation(Bytes),
Term;
dec_os_Value219(Bytes, Id) ->
Bytes.


dec_os_Value222(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value222(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value222(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value222(Bytes, 86) ->
{Term,_} = 'S1AP-IEs':'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value222(Bytes, Id) ->
Bytes.


dec_os_Value225(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value225(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value225(Bytes, 86) ->
{Term,_} = 'S1AP-IEs':'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value225(Bytes, Id) ->
Bytes.


dec_os_Value228(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value228(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value228(Bytes, 86) ->
{Term,_} = 'S1AP-IEs':'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value228(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value228(Bytes, 131) ->
{Term,_} = 'S1AP-IEs':dec_TransportLayerAddress(Bytes),
Term;
dec_os_Value228(Bytes, Id) ->
Bytes.


dec_os_Value231(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value231(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value231(Bytes, 98) ->
{Term,_} = 'S1AP-IEs':dec_RequestType(Bytes),
Term;
dec_os_Value231(Bytes, Id) ->
Bytes.


dec_os_Value234(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value234(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value234(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value234(Bytes, Id) ->
Bytes.


dec_os_Value237(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value237(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value237(Bytes, 67) ->
{Term,_} = 'S1AP-IEs':dec_TAI(Bytes),
Term;
dec_os_Value237(Bytes, 98) ->
{Term,_} = 'S1AP-IEs':dec_RequestType(Bytes),
Term;
dec_os_Value237(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value237(Bytes, Id) ->
Bytes.


dec_os_Value240(Bytes, 101) ->
{Term,_} = 'S1AP-IEs':dec_OverloadResponse(Bytes),
Term;
dec_os_Value240(Bytes, Id) ->
Bytes.


dec_os_Value244(Bytes, 111) ->
{Term,_} = 'S1AP-IEs':dec_MessageIdentifier(Bytes),
Term;
dec_os_Value244(Bytes, 112) ->
{Term,_} = 'S1AP-IEs':dec_SerialNumber(Bytes),
Term;
dec_os_Value244(Bytes, 113) ->
{Term,_} = 'S1AP-IEs':dec_WarningAreaList(Bytes),
Term;
dec_os_Value244(Bytes, 114) ->
{Term,_} = 'S1AP-IEs':dec_RepetitionPeriod(Bytes),
Term;
dec_os_Value244(Bytes, 115) ->
{Term,_} = 'S1AP-IEs':dec_NumberofBroadcastRequest(Bytes),
Term;
dec_os_Value244(Bytes, 116) ->
{Term,_} = 'S1AP-IEs':dec_WarningType(Bytes),
Term;
dec_os_Value244(Bytes, 117) ->
{Term,_} = 'S1AP-IEs':dec_WarningSecurityInfo(Bytes),
Term;
dec_os_Value244(Bytes, 118) ->
{Term,_} = 'S1AP-IEs':dec_DataCodingScheme(Bytes),
Term;
dec_os_Value244(Bytes, 119) ->
{Term,_} = 'S1AP-IEs':dec_WarningMessageContents(Bytes),
Term;
dec_os_Value244(Bytes, 142) ->
{Term,_} = 'S1AP-IEs':dec_ConcurrentWarningMessageIndicator(Bytes),
Term;
dec_os_Value244(Bytes, 144) ->
{Term,_} = 'S1AP-IEs':dec_ExtendedRepetitionPeriod(Bytes),
Term;
dec_os_Value244(Bytes, Id) ->
Bytes.


dec_os_Value247(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value247(Bytes, 111) ->
{Term,_} = 'S1AP-IEs':dec_MessageIdentifier(Bytes),
Term;
dec_os_Value247(Bytes, 112) ->
{Term,_} = 'S1AP-IEs':dec_SerialNumber(Bytes),
Term;
dec_os_Value247(Bytes, 120) ->
{Term,_} = 'S1AP-IEs':dec_BroadcastCompletedAreaList(Bytes),
Term;
dec_os_Value247(Bytes, Id) ->
Bytes.


dec_os_Value250(Bytes, 121) ->
{Term,_} = 'dec_Inter-SystemInformationTransferType'(Bytes),
Term;
dec_os_Value250(Bytes, Id) ->
Bytes.


dec_os_Value253(Bytes, 122) ->
{Term,_} = 'dec_Inter-SystemInformationTransferType'(Bytes),
Term;
dec_os_Value253(Bytes, Id) ->
Bytes.


dec_os_Value256(Bytes, 129) ->
{Term,_} = 'S1AP-IEs':dec_SONConfigurationTransfer(Bytes),
Term;
dec_os_Value256(Bytes, Id) ->
Bytes.


dec_os_Value259(Bytes, 130) ->
{Term,_} = 'S1AP-IEs':dec_SONConfigurationTransfer(Bytes),
Term;
dec_os_Value259(Bytes, Id) ->
Bytes.


dec_os_Value263(Bytes, 111) ->
{Term,_} = 'S1AP-IEs':dec_MessageIdentifier(Bytes),
Term;
dec_os_Value263(Bytes, 112) ->
{Term,_} = 'S1AP-IEs':dec_SerialNumber(Bytes),
Term;
dec_os_Value263(Bytes, 113) ->
{Term,_} = 'S1AP-IEs':dec_WarningAreaList(Bytes),
Term;
dec_os_Value263(Bytes, Id) ->
Bytes.


dec_os_Value266(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value266(Bytes, 111) ->
{Term,_} = 'S1AP-IEs':dec_MessageIdentifier(Bytes),
Term;
dec_os_Value266(Bytes, 112) ->
{Term,_} = 'S1AP-IEs':dec_SerialNumber(Bytes),
Term;
dec_os_Value266(Bytes, 141) ->
{Term,_} = 'S1AP-IEs':dec_BroadcastCancelledAreaList(Bytes),
Term;
dec_os_Value266(Bytes, Id) ->
Bytes.


dec_os_Value269(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value269(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value269(Bytes, 147) ->
{Term,_} = 'S1AP-IEs':'dec_LPPa-PDU'(Bytes),
Term;
dec_os_Value269(Bytes, 148) ->
{Term,_} = 'S1AP-IEs':'dec_Routing-ID'(Bytes),
Term;
dec_os_Value269(Bytes, Id) ->
Bytes.


dec_os_Value27(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value27(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value27(Bytes, 18) ->
{Term,_} = 'dec_E-RABAdmittedList'(Bytes),
Term;
dec_os_Value27(Bytes, 19) ->
{Term,_} = 'dec_E-RABFailedtoSetupListHOReqAck'(Bytes),
Term;
dec_os_Value27(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value27(Bytes, 123) ->
{Term,_} = 'S1AP-IEs':'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value27(Bytes, 127) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-Id'(Bytes),
Term;
dec_os_Value27(Bytes, 145) ->
{Term,_} = 'S1AP-IEs':dec_CellAccessMode(Bytes),
Term;
dec_os_Value27(Bytes, Id) ->
Bytes.


dec_os_Value272(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value272(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value272(Bytes, 147) ->
{Term,_} = 'S1AP-IEs':'dec_LPPa-PDU'(Bytes),
Term;
dec_os_Value272(Bytes, 148) ->
{Term,_} = 'S1AP-IEs':'dec_Routing-ID'(Bytes),
Term;
dec_os_Value272(Bytes, Id) ->
Bytes.


dec_os_Value275(Bytes, 147) ->
{Term,_} = 'S1AP-IEs':'dec_LPPa-PDU'(Bytes),
Term;
dec_os_Value275(Bytes, 148) ->
{Term,_} = 'S1AP-IEs':'dec_Routing-ID'(Bytes),
Term;
dec_os_Value275(Bytes, Id) ->
Bytes.


dec_os_Value278(Bytes, 147) ->
{Term,_} = 'S1AP-IEs':'dec_LPPa-PDU'(Bytes),
Term;
dec_os_Value278(Bytes, 148) ->
{Term,_} = 'S1AP-IEs':'dec_Routing-ID'(Bytes),
Term;
dec_os_Value278(Bytes, Id) ->
Bytes.


dec_os_Value3(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value3(Bytes, 1) ->
{Term,_} = 'S1AP-IEs':dec_HandoverType(Bytes),
Term;
dec_os_Value3(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value3(Bytes, 4) ->
{Term,_} = 'S1AP-IEs':dec_TargetID(Bytes),
Term;
dec_os_Value3(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value3(Bytes, 79) ->
{Term,_} = 'S1AP-IEs':'dec_Direct-Forwarding-Path-Availability'(Bytes),
Term;
dec_os_Value3(Bytes, 104) ->
{Term,_} = 'S1AP-IEs':'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value3(Bytes, 125) ->
{Term,_} = 'S1AP-IEs':dec_SRVCCHOIndication(Bytes),
Term;
dec_os_Value3(Bytes, 127) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-Id'(Bytes),
Term;
dec_os_Value3(Bytes, 132) ->
{Term,_} = 'S1AP-IEs':dec_MSClassmark2(Bytes),
Term;
dec_os_Value3(Bytes, 133) ->
{Term,_} = 'S1AP-IEs':dec_MSClassmark3(Bytes),
Term;
dec_os_Value3(Bytes, 138) ->
{Term,_} = 'S1AP-IEs':'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value3(Bytes, 145) ->
{Term,_} = 'S1AP-IEs':dec_CellAccessMode(Bytes),
Term;
dec_os_Value3(Bytes, 150) ->
{Term,_} = 'S1AP-IEs':'dec_PS-ServiceNotAvailable'(Bytes),
Term;
dec_os_Value3(Bytes, Id) ->
Bytes.


dec_os_Value30(Bytes, 20) ->
{Term,_} = 'dec_E-RABAdmittedItem'(Bytes),
Term;
dec_os_Value30(Bytes, Id) ->
Bytes.


dec_os_Value34(Bytes, 21) ->
{Term,_} = 'dec_E-RABFailedToSetupItemHOReqAck'(Bytes),
Term;
dec_os_Value34(Bytes, Id) ->
Bytes.


dec_os_Value38(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value38(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value38(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value38(Bytes, Id) ->
Bytes.


dec_os_Value41(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value41(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value41(Bytes, 67) ->
{Term,_} = 'S1AP-IEs':dec_TAI(Bytes),
Term;
dec_os_Value41(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value41(Bytes, Id) ->
Bytes.


dec_os_Value44(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value44(Bytes, 22) ->
{Term,_} = 'dec_E-RABToBeSwitchedDLList'(Bytes),
Term;
dec_os_Value44(Bytes, 67) ->
{Term,_} = 'S1AP-IEs':dec_TAI(Bytes),
Term;
dec_os_Value44(Bytes, 88) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value44(Bytes, 100) ->
{Term,_} = 'S1AP-IEs':'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value44(Bytes, 107) ->
{Term,_} = 'S1AP-IEs':dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value44(Bytes, 127) ->
{Term,_} = 'S1AP-IEs':'dec_CSG-Id'(Bytes),
Term;
dec_os_Value44(Bytes, 145) ->
{Term,_} = 'S1AP-IEs':dec_CellAccessMode(Bytes),
Term;
dec_os_Value44(Bytes, 146) ->
{Term,_} = 'S1AP-IEs':dec_CSGMembershipStatus(Bytes),
Term;
dec_os_Value44(Bytes, 157) ->
{Term,_} = 'S1AP-IEs':dec_GUMMEI(Bytes),
Term;
dec_os_Value44(Bytes, Id) ->
Bytes.


dec_os_Value47(Bytes, 23) ->
{Term,_} = 'dec_E-RABToBeSwitchedDLItem'(Bytes),
Term;
dec_os_Value47(Bytes, Id) ->
Bytes.


dec_os_Value51(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value51(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value51(Bytes, 33) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value51(Bytes, 40) ->
{Term,_} = 'S1AP-IEs':dec_SecurityContext(Bytes),
Term;
dec_os_Value51(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value51(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value51(Bytes, 95) ->
{Term,_} = 'dec_E-RABToBeSwitchedULList'(Bytes),
Term;
dec_os_Value51(Bytes, 146) ->
{Term,_} = 'S1AP-IEs':dec_CSGMembershipStatus(Bytes),
Term;
dec_os_Value51(Bytes, Id) ->
Bytes.


dec_os_Value54(Bytes, 94) ->
{Term,_} = 'dec_E-RABToBeSwitchedULItem'(Bytes),
Term;
dec_os_Value54(Bytes, Id) ->
Bytes.


dec_os_Value58(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value58(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value58(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value58(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value58(Bytes, Id) ->
Bytes.


dec_os_Value6(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value6(Bytes, 1) ->
{Term,_} = 'S1AP-IEs':dec_HandoverType(Bytes),
Term;
dec_os_Value6(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value6(Bytes, 12) ->
{Term,_} = 'dec_E-RABSubjecttoDataForwardingList'(Bytes),
Term;
dec_os_Value6(Bytes, 13) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value6(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value6(Bytes, 123) ->
{Term,_} = 'S1AP-IEs':'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value6(Bytes, 135) ->
{Term,_} = 'S1AP-IEs':'dec_NASSecurityParametersfromE-UTRAN'(Bytes),
Term;
dec_os_Value6(Bytes, 139) ->
{Term,_} = 'S1AP-IEs':'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value6(Bytes, Id) ->
Bytes.


dec_os_Value61(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value61(Bytes, 2) ->
{Term,_} = 'S1AP-IEs':dec_Cause(Bytes),
Term;
dec_os_Value61(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value61(Bytes, Id) ->
Bytes.


dec_os_Value64(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value64(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value64(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value64(Bytes, Id) ->
Bytes.


dec_os_Value67(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value67(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value67(Bytes, 16) ->
{Term,_} = 'dec_E-RABToBeSetupListBearerSUReq'(Bytes),
Term;
dec_os_Value67(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value67(Bytes, Id) ->
Bytes.


dec_os_Value70(Bytes, 17) ->
{Term,_} = 'dec_E-RABToBeSetupItemBearerSUReq'(Bytes),
Term;
dec_os_Value70(Bytes, Id) ->
Bytes.


dec_os_Value74(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value74(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value74(Bytes, 28) ->
{Term,_} = 'dec_E-RABSetupListBearerSURes'(Bytes),
Term;
dec_os_Value74(Bytes, 29) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value74(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value74(Bytes, Id) ->
Bytes.


dec_os_Value77(Bytes, 39) ->
{Term,_} = 'dec_E-RABSetupItemBearerSURes'(Bytes),
Term;
dec_os_Value77(Bytes, Id) ->
Bytes.


dec_os_Value81(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value81(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value81(Bytes, 30) ->
{Term,_} = 'dec_E-RABToBeModifiedListBearerModReq'(Bytes),
Term;
dec_os_Value81(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value81(Bytes, Id) ->
Bytes.


dec_os_Value84(Bytes, 36) ->
{Term,_} = 'dec_E-RABToBeModifiedItemBearerModReq'(Bytes),
Term;
dec_os_Value84(Bytes, Id) ->
Bytes.


dec_os_Value88(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value88(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value88(Bytes, 31) ->
{Term,_} = 'dec_E-RABModifyListBearerModRes'(Bytes),
Term;
dec_os_Value88(Bytes, 32) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value88(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value88(Bytes, Id) ->
Bytes.


dec_os_Value9(Bytes, 14) ->
{Term,_} = 'dec_E-RABDataForwardingItem'(Bytes),
Term;
dec_os_Value9(Bytes, Id) ->
Bytes.


dec_os_Value91(Bytes, 37) ->
{Term,_} = 'dec_E-RABModifyItemBearerModRes'(Bytes),
Term;
dec_os_Value91(Bytes, Id) ->
Bytes.


dec_os_Value95(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value95(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value95(Bytes, 26) ->
{Term,_} = 'S1AP-IEs':'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value95(Bytes, 33) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value95(Bytes, 66) ->
{Term,_} = 'S1AP-IEs':dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value95(Bytes, Id) ->
Bytes.


dec_os_Value98(Bytes, 0) ->
{Term,_} = 'S1AP-IEs':'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value98(Bytes, 8) ->
{Term,_} = 'S1AP-IEs':'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value98(Bytes, 34) ->
{Term,_} = 'S1AP-IEs':'dec_E-RABList'(Bytes),
Term;
dec_os_Value98(Bytes, 58) ->
{Term,_} = 'S1AP-IEs':dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value98(Bytes, 69) ->
{Term,_} = 'dec_E-RABReleaseListBearerRelComp'(Bytes),
Term;
dec_os_Value98(Bytes, 189) ->
{Term,_} = 'S1AP-IEs':dec_UserLocationInformation(Bytes),
Term;
dec_os_Value98(Bytes, Id) ->
Bytes.


enc_os_Extension10(Val, Id) ->
legacy_open_type_to_binary(Val).

enc_os_Extension22(Val, Id) ->
if Id =:= 143 ->
'S1AP-IEs':'enc_Data-Forwarding-Not-Possible'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value1(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
'S1AP-IEs':enc_HandoverType(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 4 ->
'S1AP-IEs':enc_TargetID(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 79 ->
'S1AP-IEs':'enc_Direct-Forwarding-Path-Availability'(Val);
Id =:= 104 ->
'S1AP-IEs':'enc_Source-ToTarget-TransparentContainer'(Val);
Id =:= 125 ->
'S1AP-IEs':enc_SRVCCHOIndication(Val);
Id =:= 127 ->
'S1AP-IEs':'enc_CSG-Id'(Val);
Id =:= 132 ->
'S1AP-IEs':enc_MSClassmark2(Val);
Id =:= 133 ->
'S1AP-IEs':enc_MSClassmark3(Val);
Id =:= 138 ->
'S1AP-IEs':'enc_Source-ToTarget-TransparentContainer'(Val);
Id =:= 145 ->
'S1AP-IEs':enc_CellAccessMode(Val);
Id =:= 150 ->
'S1AP-IEs':'enc_PS-ServiceNotAvailable'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value103(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 110 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 189 ->
'S1AP-IEs':enc_UserLocationInformation(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value106(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 24 ->
'enc_E-RABToBeSetupListCtxtSUReq'(Val);
Id =:= 25 ->
'S1AP-IEs':enc_TraceActivation(Val);
Id =:= 41 ->
'S1AP-IEs':enc_HandoverRestrictionList(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
Id =:= 73 ->
'S1AP-IEs':enc_SecurityKey(Val);
Id =:= 74 ->
'S1AP-IEs':enc_UERadioCapability(Val);
Id =:= 106 ->
'S1AP-IEs':enc_SubscriberProfileIDforRFP(Val);
Id =:= 107 ->
'S1AP-IEs':enc_UESecurityCapabilities(Val);
Id =:= 108 ->
'S1AP-IEs':enc_CSFallbackIndicator(Val);
Id =:= 124 ->
'S1AP-IEs':enc_SRVCCOperationPossible(Val);
Id =:= 146 ->
'S1AP-IEs':enc_CSGMembershipStatus(Val);
Id =:= 159 ->
'S1AP-IEs':enc_LAI(Val);
Id =:= 192 ->
'S1AP-IEs':'enc_Masked-IMEISV'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value109(Val, Id) ->
if Id =:= 52 ->
'enc_E-RABToBeSetupItemCtxtSUReq'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value113(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 48 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 51 ->
'enc_E-RABSetupListCtxtSURes'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value116(Val, Id) ->
if Id =:= 50 ->
'enc_E-RABSetupItemCtxtSURes'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value120(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value123(Val, Id) ->
if Id =:= 43 ->
'S1AP-IEs':enc_UEPagingID(Val);
Id =:= 44 ->
'S1AP-IEs':enc_PagingDRX(Val);
Id =:= 46 ->
enc_TAIList(Val);
Id =:= 80 ->
'S1AP-IEs':enc_UEIdentityIndexValue(Val);
Id =:= 109 ->
'S1AP-IEs':enc_CNDomain(Val);
Id =:= 128 ->
'S1AP-IEs':'enc_CSG-IdList'(Val);
Id =:= 151 ->
'S1AP-IEs':enc_PagingPriority(Val);
Id =:= 198 ->
'S1AP-IEs':enc_UERadioCapabilityForPaging(Val);
Id =:= 211 ->
'S1AP-IEs':enc_AssistanceDataForPaging(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value126(Val, Id) ->
if Id =:= 47 ->
enc_TAIItem(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value13(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value130(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value133(Val, Id) ->
if Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 99 ->
'S1AP-IEs':'enc_UE-S1AP-IDs'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value136(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 189 ->
'S1AP-IEs':enc_UserLocationInformation(Val);
Id =:= 212 ->
'S1AP-IEs':enc_CellIdentifierAndCELevelForCECapableUEs(Val);
Id =:= 213 ->
'S1AP-IEs':enc_InformationOnRecommendedCellsAndENBsForPaging(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value139(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
Id =:= 73 ->
'S1AP-IEs':enc_SecurityKey(Val);
Id =:= 106 ->
'S1AP-IEs':enc_SubscriberProfileIDforRFP(Val);
Id =:= 107 ->
'S1AP-IEs':enc_UESecurityCapabilities(Val);
Id =:= 108 ->
'S1AP-IEs':enc_CSFallbackIndicator(Val);
Id =:= 146 ->
'S1AP-IEs':enc_CSGMembershipStatus(Val);
Id =:= 159 ->
'S1AP-IEs':enc_LAI(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value142(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value145(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value148(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'S1AP-IEs':'enc_NAS-PDU'(Val);
Id =:= 41 ->
'S1AP-IEs':enc_HandoverRestrictionList(Val);
Id =:= 106 ->
'S1AP-IEs':enc_SubscriberProfileIDforRFP(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value151(Val, Id) ->
if Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'S1AP-IEs':'enc_NAS-PDU'(Val);
Id =:= 67 ->
'S1AP-IEs':enc_TAI(Val);
Id =:= 75 ->
'S1AP-IEs':enc_GUMMEI(Val);
Id =:= 96 ->
'S1AP-IEs':'enc_S-TMSI'(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
Id =:= 127 ->
'S1AP-IEs':'enc_CSG-Id'(Val);
Id =:= 134 ->
'S1AP-IEs':'enc_RRC-Establishment-Cause'(Val);
Id =:= 145 ->
'S1AP-IEs':enc_CellAccessMode(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value154(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'S1AP-IEs':'enc_NAS-PDU'(Val);
Id =:= 67 ->
'S1AP-IEs':enc_TAI(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value157(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'S1AP-IEs':'enc_NAS-PDU'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value16(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
'S1AP-IEs':enc_HandoverType(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 25 ->
'S1AP-IEs':enc_TraceActivation(Val);
Id =:= 40 ->
'S1AP-IEs':enc_SecurityContext(Val);
Id =:= 41 ->
'S1AP-IEs':enc_HandoverRestrictionList(Val);
Id =:= 53 ->
'enc_E-RABToBeSetupListHOReq'(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
Id =:= 98 ->
'S1AP-IEs':enc_RequestType(Val);
Id =:= 104 ->
'S1AP-IEs':'enc_Source-ToTarget-TransparentContainer'(Val);
Id =:= 107 ->
'S1AP-IEs':enc_UESecurityCapabilities(Val);
Id =:= 124 ->
'S1AP-IEs':enc_SRVCCOperationPossible(Val);
Id =:= 127 ->
'S1AP-IEs':'enc_CSG-Id'(Val);
Id =:= 136 ->
'S1AP-IEs':'enc_NASSecurityParameterstoE-UTRAN'(Val);
Id =:= 146 ->
'S1AP-IEs':enc_CSGMembershipStatus(Val);
Id =:= 192 ->
'S1AP-IEs':'enc_Masked-IMEISV'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value160(Val, Id) ->
if Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 92 ->
enc_ResetType(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value163(Val, Id) ->
if Id =:= 91 ->
'S1AP-IEs':'enc_UE-associatedLogicalS1-ConnectionItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value166(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 93 ->
'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value169(Val, Id) ->
if Id =:= 91 ->
'S1AP-IEs':'enc_UE-associatedLogicalS1-ConnectionItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value172(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value175(Val, Id) ->
if Id =:= 59 ->
'S1AP-IEs':'enc_Global-ENB-ID'(Val);
Id =:= 60 ->
'S1AP-IEs':enc_ENBname(Val);
Id =:= 64 ->
'S1AP-IEs':enc_SupportedTAs(Val);
Id =:= 128 ->
'S1AP-IEs':'enc_CSG-IdList'(Val);
Id =:= 137 ->
'S1AP-IEs':enc_PagingDRX(Val);
Id =:= 43229 ->
'S1AP-Ericsson-IEs':'enc_EAB-S1SetupRequest-ExtConveyor'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value178(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 61 ->
'S1AP-IEs':enc_MMEname(Val);
Id =:= 87 ->
'S1AP-IEs':enc_RelativeMMECapacity(Val);
Id =:= 105 ->
'S1AP-IEs':enc_ServedGUMMEIs(Val);
Id =:= 43229 ->
'S1AP-Ericsson-IEs':'enc_EAB-S1SetupResponse-ExtConveyor'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value181(Val, Id) ->
if Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
'S1AP-IEs':enc_TimeToWait(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value184(Val, Id) ->
if Id =:= 60 ->
'S1AP-IEs':enc_ENBname(Val);
Id =:= 64 ->
'S1AP-IEs':enc_SupportedTAs(Val);
Id =:= 128 ->
'S1AP-IEs':'enc_CSG-IdList'(Val);
Id =:= 137 ->
'S1AP-IEs':enc_PagingDRX(Val);
Id =:= 43229 ->
'S1AP-Ericsson-IEs':'enc_EAB-ENBConfigurationUpdate-ExtConveyor'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value187(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value19(Val, Id) ->
if Id =:= 27 ->
'enc_E-RABToBeSetupItemHOReq'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value190(Val, Id) ->
if Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
'S1AP-IEs':enc_TimeToWait(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value193(Val, Id) ->
if Id =:= 61 ->
'S1AP-IEs':enc_MMEname(Val);
Id =:= 87 ->
'S1AP-IEs':enc_RelativeMMECapacity(Val);
Id =:= 105 ->
'S1AP-IEs':enc_ServedGUMMEIs(Val);
Id =:= 43229 ->
'S1AP-Ericsson-IEs':'enc_EAB-MMEConfigurationUpdate-ExtConveyor'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value196(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value199(Val, Id) ->
if Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
'S1AP-IEs':enc_TimeToWait(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value202(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 12 ->
'enc_E-RABSubjecttoDataForwardingList'(Val);
Id =:= 70 ->
'S1AP-IEs':enc_Cdma2000PDU(Val);
Id =:= 71 ->
'S1AP-IEs':enc_Cdma2000RATType(Val);
Id =:= 83 ->
'S1AP-IEs':enc_Cdma2000HOStatus(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value205(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 70 ->
'S1AP-IEs':enc_Cdma2000PDU(Val);
Id =:= 71 ->
'S1AP-IEs':enc_Cdma2000RATType(Val);
Id =:= 72 ->
'S1AP-IEs':enc_Cdma2000SectorID(Val);
Id =:= 84 ->
'S1AP-IEs':enc_Cdma2000HORequiredIndication(Val);
Id =:= 97 ->
'S1AP-IEs':enc_Cdma2000OneXRAND(Val);
Id =:= 102 ->
'S1AP-IEs':enc_Cdma2000OneXSRVCCInfo(Val);
Id =:= 140 ->
'S1AP-IEs':enc_EUTRANRoundTripDelayEstimationInfo(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value208(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 74 ->
'S1AP-IEs':enc_UERadioCapability(Val);
Id =:= 198 ->
'S1AP-IEs':enc_UERadioCapabilityForPaging(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value211(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 90 ->
'S1AP-IEs':'enc_ENB-StatusTransfer-TransparentContainer'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value214(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 90 ->
'S1AP-IEs':'enc_ENB-StatusTransfer-TransparentContainer'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value217(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 25 ->
'S1AP-IEs':enc_TraceActivation(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value220(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'S1AP-IEs':'enc_E-UTRAN-Trace-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value223(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'S1AP-IEs':'enc_E-UTRAN-Trace-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value226(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'S1AP-IEs':'enc_E-UTRAN-Trace-ID'(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
Id =:= 131 ->
'S1AP-IEs':enc_TransportLayerAddress(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value229(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 98 ->
'S1AP-IEs':enc_RequestType(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value232(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value235(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 67 ->
'S1AP-IEs':enc_TAI(Val);
Id =:= 98 ->
'S1AP-IEs':enc_RequestType(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value238(Val, Id) ->
if Id =:= 101 ->
'S1AP-IEs':enc_OverloadResponse(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value242(Val, Id) ->
if Id =:= 111 ->
'S1AP-IEs':enc_MessageIdentifier(Val);
Id =:= 112 ->
'S1AP-IEs':enc_SerialNumber(Val);
Id =:= 113 ->
'S1AP-IEs':enc_WarningAreaList(Val);
Id =:= 114 ->
'S1AP-IEs':enc_RepetitionPeriod(Val);
Id =:= 115 ->
'S1AP-IEs':enc_NumberofBroadcastRequest(Val);
Id =:= 116 ->
'S1AP-IEs':enc_WarningType(Val);
Id =:= 117 ->
'S1AP-IEs':enc_WarningSecurityInfo(Val);
Id =:= 118 ->
'S1AP-IEs':enc_DataCodingScheme(Val);
Id =:= 119 ->
'S1AP-IEs':enc_WarningMessageContents(Val);
Id =:= 142 ->
'S1AP-IEs':enc_ConcurrentWarningMessageIndicator(Val);
Id =:= 144 ->
'S1AP-IEs':enc_ExtendedRepetitionPeriod(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value245(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 111 ->
'S1AP-IEs':enc_MessageIdentifier(Val);
Id =:= 112 ->
'S1AP-IEs':enc_SerialNumber(Val);
Id =:= 120 ->
'S1AP-IEs':enc_BroadcastCompletedAreaList(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value248(Val, Id) ->
if Id =:= 121 ->
'enc_Inter-SystemInformationTransferType'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value25(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 18 ->
'enc_E-RABAdmittedList'(Val);
Id =:= 19 ->
'enc_E-RABFailedtoSetupListHOReqAck'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 123 ->
'S1AP-IEs':'enc_Target-ToSource-TransparentContainer'(Val);
Id =:= 127 ->
'S1AP-IEs':'enc_CSG-Id'(Val);
Id =:= 145 ->
'S1AP-IEs':enc_CellAccessMode(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value251(Val, Id) ->
if Id =:= 122 ->
'enc_Inter-SystemInformationTransferType'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value254(Val, Id) ->
if Id =:= 129 ->
'S1AP-IEs':enc_SONConfigurationTransfer(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value257(Val, Id) ->
if Id =:= 130 ->
'S1AP-IEs':enc_SONConfigurationTransfer(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value261(Val, Id) ->
if Id =:= 111 ->
'S1AP-IEs':enc_MessageIdentifier(Val);
Id =:= 112 ->
'S1AP-IEs':enc_SerialNumber(Val);
Id =:= 113 ->
'S1AP-IEs':enc_WarningAreaList(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value264(Val, Id) ->
if Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 111 ->
'S1AP-IEs':enc_MessageIdentifier(Val);
Id =:= 112 ->
'S1AP-IEs':enc_SerialNumber(Val);
Id =:= 141 ->
'S1AP-IEs':enc_BroadcastCancelledAreaList(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value267(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 147 ->
'S1AP-IEs':'enc_LPPa-PDU'(Val);
Id =:= 148 ->
'S1AP-IEs':'enc_Routing-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value270(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 147 ->
'S1AP-IEs':'enc_LPPa-PDU'(Val);
Id =:= 148 ->
'S1AP-IEs':'enc_Routing-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value273(Val, Id) ->
if Id =:= 147 ->
'S1AP-IEs':'enc_LPPa-PDU'(Val);
Id =:= 148 ->
'S1AP-IEs':'enc_Routing-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value276(Val, Id) ->
if Id =:= 147 ->
'S1AP-IEs':'enc_LPPa-PDU'(Val);
Id =:= 148 ->
'S1AP-IEs':'enc_Routing-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value28(Val, Id) ->
if Id =:= 20 ->
'enc_E-RABAdmittedItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value32(Val, Id) ->
if Id =:= 21 ->
'enc_E-RABFailedToSetupItemHOReqAck'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value36(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value39(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 67 ->
'S1AP-IEs':enc_TAI(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value4(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
'S1AP-IEs':enc_HandoverType(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 12 ->
'enc_E-RABSubjecttoDataForwardingList'(Val);
Id =:= 13 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 123 ->
'S1AP-IEs':'enc_Target-ToSource-TransparentContainer'(Val);
Id =:= 135 ->
'S1AP-IEs':'enc_NASSecurityParametersfromE-UTRAN'(Val);
Id =:= 139 ->
'S1AP-IEs':'enc_Target-ToSource-TransparentContainer'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value42(Val, Id) ->
if Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 22 ->
'enc_E-RABToBeSwitchedDLList'(Val);
Id =:= 67 ->
'S1AP-IEs':enc_TAI(Val);
Id =:= 88 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 100 ->
'S1AP-IEs':'enc_EUTRAN-CGI'(Val);
Id =:= 107 ->
'S1AP-IEs':enc_UESecurityCapabilities(Val);
Id =:= 127 ->
'S1AP-IEs':'enc_CSG-Id'(Val);
Id =:= 145 ->
'S1AP-IEs':enc_CellAccessMode(Val);
Id =:= 146 ->
'S1AP-IEs':enc_CSGMembershipStatus(Val);
Id =:= 157 ->
'S1AP-IEs':enc_GUMMEI(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value45(Val, Id) ->
if Id =:= 23 ->
'enc_E-RABToBeSwitchedDLItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value49(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 33 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 40 ->
'S1AP-IEs':enc_SecurityContext(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
Id =:= 95 ->
'enc_E-RABToBeSwitchedULList'(Val);
Id =:= 146 ->
'S1AP-IEs':enc_CSGMembershipStatus(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value52(Val, Id) ->
if Id =:= 94 ->
'enc_E-RABToBeSwitchedULItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value56(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value59(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
'S1AP-IEs':enc_Cause(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value62(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value65(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 16 ->
'enc_E-RABToBeSetupListBearerSUReq'(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value68(Val, Id) ->
if Id =:= 17 ->
'enc_E-RABToBeSetupItemBearerSUReq'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value7(Val, Id) ->
if Id =:= 14 ->
'enc_E-RABDataForwardingItem'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value72(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 28 ->
'enc_E-RABSetupListBearerSURes'(Val);
Id =:= 29 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value75(Val, Id) ->
if Id =:= 39 ->
'enc_E-RABSetupItemBearerSURes'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value79(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 30 ->
'enc_E-RABToBeModifiedListBearerModReq'(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value82(Val, Id) ->
if Id =:= 36 ->
'enc_E-RABToBeModifiedItemBearerModReq'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value86(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 31 ->
'enc_E-RABModifyListBearerModRes'(Val);
Id =:= 32 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value89(Val, Id) ->
if Id =:= 37 ->
'enc_E-RABModifyItemBearerModRes'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value93(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'S1AP-IEs':'enc_NAS-PDU'(Val);
Id =:= 33 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 66 ->
'S1AP-IEs':enc_UEAggregateMaximumBitrate(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value96(Val, Id) ->
if Id =:= 0 ->
'S1AP-IEs':'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'S1AP-IEs':'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 34 ->
'S1AP-IEs':'enc_E-RABList'(Val);
Id =:= 58 ->
'S1AP-IEs':enc_CriticalityDiagnostics(Val);
Id =:= 69 ->
'enc_E-RABReleaseListBearerRelComp'(Val);
Id =:= 189 ->
'S1AP-IEs':enc_UserLocationInformation(Val);
true ->
legacy_open_type_to_binary(Val)
end.

enc_os_Value99(Val, Id) ->
if Id =:= 15 ->
'enc_E-RABReleaseItemBearerRelComp'(Val);
true ->
legacy_open_type_to_binary(Val)
end.

adjust_size(Bs, Lb) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs:Sz/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end.

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

decode_compact_bit_string(Val) ->
    PadLen = (8 - bit_size(Val) band 7) band 7,
    {PadLen,<<Val/bitstring,0:PadLen>>}.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

int_to_bitlist(0) ->
    [];
int_to_bitlist(Int) ->
    [Int band 1|int_to_bitlist(Int bsr 1)].

legacy_open_type_to_binary({asn1_OPENTYPE,Bin}) when is_binary(Bin) ->
    Bin;
legacy_open_type_to_binary(Bin) when is_binary(Bin) ->
    Bin;
legacy_open_type_to_binary(List) when is_list(List) ->
    List.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.

to_bitstring({0,Bs}, Lb) when is_binary(Bs) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end;
to_bitstring({Unused,Bs0}, Lb) when is_binary(Bs0) ->
    Sz = bit_size(Bs0) - Unused,
    if
        Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        true ->
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end;
to_bitstring(Bs, Lb) when is_bitstring(Bs) ->
    adjust_size(Bs, Lb);
to_bitstring(Int, Lb) when is_integer(Int), Int >= 0 ->
    L = int_to_bitlist(Int),
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb);
to_bitstring(L, Lb) when is_list(L) ->
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb).
